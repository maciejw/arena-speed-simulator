{"version":3,"sources":["SpeedCalculator/speed.ts","SpeedCalculator/index.tsx","BattleSimulator/state.ts","BattleSimulator/turnMeter.ts","BattleSimulator/battleReducer.ts","BattleSimulator/Ticker.tsx","BattleSimulator/ProgressBar.tsx","BattleSimulator/Champion.tsx","BattleSimulator/index.tsx","Navigation.tsx","App.tsx","index.tsx"],"names":["log","console","getAuraBonus","baseSpeed","aura","numberRoundDecimal","number","decimalPlaces","Math","round","Number","EPSILON","pow","getLoreOfSteelBonus","numberOfSpeedSets","loreOfSteelPresent","loreOfSeelModifier","speedSetBonus","getSpeedSetBonus","speedSetBonusWithLoreOfSteel","calculationModes","calculateRealSpeedFromArtifacts","artifactSpeed","auraBonus","loreOfSteelBonus","speedSetBonusRounded","artifactStatSubStatSpeed","realSpeedBeforeRounding","calculateRealSpeedFromTotal","totalSpeed","loreOfSteelBonusRounded","toInt","value","parseInt","SpeedCalculator","useState","mode","result","undefined","state","update","calculate","updateAndRecalculate","Form","ButtonGroup","Button","variant","onClick","Alert","Heading","toFixed","TotalSpeedCalculator","ArtifactSpeedCalculator","TextField","controlId","label","onInput","Group","Label","Control","type","CheckField","checked","onChange","Check","inline","AuraField","e","currentTarget","BaseSpeedField","TotalSpeedField","ArtifactSpeedField","parseFloat","NumberOfSpeedSetsField","LoreOfSteelPresentField","props","sameChampion","one","another","champ","team","sameChampionOrTeam","filteredChampion","TurnMeterFill","amount","this","champion","turnMeter","rest","TurnMeterDeplete","max","replaceBuffDebuff","buffsDebuffs","buffDebuff","filter","bd","name","ApplySpeedBuff","buff","buffs","turns","ApplySpeedDebuff","debuff","deBuffs","SkillDefinition","teamModifiers","opposingTeamModifiers","length","push","map","s","toString","join","aoe15TurnMeterFill30SpeedBuff","aoe20TurnMeterFill","aoe30TurnMeterFill","aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease","aoe30SpeedDebuffEnemy","defaultSkill","updateTurnMeter","participants","speed","resetTurnMeterAndBuffsDeBuffs","newParticipant","speedBuff","speedDebuff","team1PlayersCount","team2PlayersCount","initialArenaState","activeGame","battleEvents","game","teams","team1","Array","from","team2","modifyParticipants","filteringCriteria","modify","p","newParticipantDefaults","battleReducer","action","payload","otherParticipants","currentParticipant","find","newState","participant","activeChampion","sort","c1","c2","orderChampionsByTurnMeter","turnOwner","opposingTeam","getOpposingTeam","b","applyModifiers","skill","info","order","Error","modifiers","apply","Ticker","onTick","enable","useEffect","interval","window","setInterval","clearTimeout","ProgressBar","filled","progressStyle","width","min","className","style","BuffsDebuffsInfo","i","Badge","Champion","gameState","currentlyActive","onSpeedChanged","championId","Card","bg","border","marginBottom","Header","Body","Title","Text","as","Row","column","sm","Col","str","target","ChampionInfo","BattleLog","events","ListGroup","Item","fontWeight","Team","activeMember","teamMembers","teamMembersGameData","indexedTeam","Container","fluid","id","md","lg","key","m","BattleSimulator","useReducer","arenaState","arenaDispatch","enabled","dispatchUseSkill","skills","vertical","Navigation","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","to","App","path","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.4ee610e1.chunk.js","sourcesContent":["let log: typeof console.log = () => {};\r\nlog = console.log;\r\n\r\nexport const ROUND_TO_DECIMAL_PLACES = 2;\r\n\r\ntype NumberOfSets = 0 | 1 | 2 | 3;\r\n\r\ntype SpeedComponentParameters = {\r\n  baseSpeed: number;\r\n  artifactSpeed: number;\r\n  aura?: number;\r\n  loreOfSteelPresent?: boolean;\r\n  numberOfSpeedSets?: NumberOfSets;\r\n};\r\n\r\ntype SpeedTotalParameters = {\r\n  baseSpeed: number;\r\n  totalSpeed: number;\r\n  aura?: number;\r\n  loreOfSteelPresent?: boolean;\r\n  numberOfSpeedSets?: NumberOfSets;\r\n};\r\nexport function calculateRealSpeedFromTotal({\r\n  baseSpeed,\r\n  totalSpeed,\r\n  aura = 0,\r\n  loreOfSteelPresent = false,\r\n  numberOfSpeedSets = 0\r\n}: SpeedTotalParameters) {\r\n  log(\"input parameters\", {\r\n    baseSpeed,\r\n    totalSpeed,\r\n    aura,\r\n    loreOfSteelPresent,\r\n    numberOfSpeedSets\r\n  });\r\n\r\n  const auraBonus = getAuraBonus(baseSpeed, aura);\r\n  log(\"auraBonus\", auraBonus);\r\n\r\n  const loreOfSteelBonus = getLoreOfSteelBonus(\r\n    baseSpeed,\r\n    numberOfSpeedSets,\r\n    loreOfSteelPresent\r\n  );\r\n  log(\"loreOfSteelBonus\", loreOfSteelBonus);\r\n\r\n  const loreOfSteelBonusRounded = numberRoundDecimal(loreOfSteelBonus);\r\n  log(\"loreOfSteelBonusRounded\", loreOfSteelBonusRounded);\r\n\r\n  const speedSetBonus = getSpeedSetBonus(baseSpeed, numberOfSpeedSets);\r\n  log(\"speedSetBonus\", speedSetBonus);\r\n\r\n  const speedSetBonusRounded = numberRoundDecimal(speedSetBonus);\r\n  log(\"speedSetBonusRounded\", speedSetBonusRounded);\r\n\r\n  const artifactSpeed =\r\n    totalSpeed - baseSpeed - loreOfSteelBonusRounded - speedSetBonusRounded;\r\n  log(\"artifactSpeed\", artifactSpeed);\r\n\r\n  const realSpeedBeforeRounding =\r\n    auraBonus + baseSpeed + speedSetBonus + loreOfSteelBonus + artifactSpeed;\r\n\r\n  log(\"realSpeedBeforeRounding\", realSpeedBeforeRounding);\r\n  return numberRoundDecimal(realSpeedBeforeRounding, ROUND_TO_DECIMAL_PLACES);\r\n}\r\nexport function calculateRealSpeedFromArtifacts({\r\n  baseSpeed,\r\n  artifactSpeed,\r\n  aura = 0,\r\n  loreOfSteelPresent = false,\r\n  numberOfSpeedSets = 0\r\n}: SpeedComponentParameters) {\r\n  log(\"input parameters\", {\r\n    baseSpeed,\r\n    artifactSpeed,\r\n    aura,\r\n    loreOfSteelPresent,\r\n    numberOfSpeedSets\r\n  });\r\n\r\n  const auraBonus = getAuraBonus(baseSpeed, aura);\r\n  log(\"auraBonus\", auraBonus);\r\n\r\n  const loreOfSteelBonus = getLoreOfSteelBonus(\r\n    baseSpeed,\r\n    numberOfSpeedSets,\r\n    loreOfSteelPresent\r\n  );\r\n  log(\"loreOfSteelBonus\", loreOfSteelBonus);\r\n\r\n  const speedSetBonus = getSpeedSetBonus(baseSpeed, numberOfSpeedSets);\r\n  log(\"speedSetBonus\", speedSetBonus);\r\n\r\n  const speedSetBonusRounded = numberRoundDecimal(speedSetBonus);\r\n  log(\"speedSetBonusRounded\", speedSetBonusRounded);\r\n\r\n  const artifactStatSubStatSpeed = artifactSpeed - speedSetBonusRounded;\r\n  log(\"realArtifactSpeed\", artifactStatSubStatSpeed);\r\n\r\n  const realSpeedBeforeRounding =\r\n    baseSpeed +\r\n    auraBonus +\r\n    artifactStatSubStatSpeed +\r\n    speedSetBonus +\r\n    loreOfSteelBonus;\r\n  log(\"realSpeedBeforeRounding\", realSpeedBeforeRounding);\r\n\r\n  return numberRoundDecimal(realSpeedBeforeRounding, ROUND_TO_DECIMAL_PLACES);\r\n}\r\nfunction getAuraBonus(baseSpeed: number, aura: number) {\r\n  const auraMultiplier = aura / 100;\r\n  return baseSpeed * auraMultiplier;\r\n}\r\nexport function numberRoundDecimal(number: number, decimalPlaces: number = 0) {\r\n  return (\r\n    Math.round((number + Number.EPSILON) * Math.pow(10, decimalPlaces)) /\r\n    Math.pow(10, decimalPlaces)\r\n  );\r\n}\r\nfunction getLoreOfSteelBonus(\r\n  baseSpeed: number,\r\n  numberOfSpeedSets: NumberOfSets,\r\n  loreOfSteelPresent = false\r\n) {\r\n  const loreOfSeelModifier = loreOfSteelPresent ? 1.15 : 1;\r\n  const speedSetBonus = getSpeedSetBonus(baseSpeed, numberOfSpeedSets);\r\n  const speedSetBonusWithLoreOfSteel = speedSetBonus * loreOfSeelModifier;\r\n\r\n  return speedSetBonusWithLoreOfSteel - speedSetBonus;\r\n}\r\n\r\nfunction getSpeedSetBonus(baseSpeed: number, numberOfSpeedSets: number) {\r\n  const speedSetPercentage = 0.12;\r\n  const speedSetBonus = baseSpeed * speedSetPercentage * numberOfSpeedSets;\r\n  return speedSetBonus;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, Alert, FormControlProps, ButtonGroup, Button } from 'react-bootstrap';\r\nimport { calculateRealSpeedFromArtifacts, calculateRealSpeedFromTotal, ROUND_TO_DECIMAL_PLACES } from './speed';\r\n\r\nconst calculationModes = {\r\n  calculateRealSpeedFromArtifacts,\r\n  calculateRealSpeedFromTotal,\r\n};\r\n\r\nfunction toInt(value: string) {\r\n  return parseInt(value, 10) || 0;\r\n}\r\n\r\nfunction toFloat(value: string) {\r\n  return parseFloat(value) || 0;\r\n}\r\n\r\nfunction toSpeedSetNumber(value: string): SpeedSetNumber {\r\n  return ((parseInt(value, 10) || 0) % 4) as SpeedSetNumber;\r\n}\r\ntype SpeedSetNumber = 0 | 1 | 2 | 3;\r\n\r\ntype Mode = keyof typeof calculationModes | 'none';\r\n\r\ntype State = {\r\n  baseSpeed: number;\r\n  aura: number;\r\n  artifactSpeed: number;\r\n  totalSpeed: number;\r\n  numberOfSpeedSets: SpeedSetNumber;\r\n  loreOfSteelPresent: boolean;\r\n  mode: Mode;\r\n  result: number | undefined;\r\n};\r\n\r\ntype Update = (e: State) => void;\r\n\r\nexport function SpeedCalculator() {\r\n  const [state, update] = useState<State>({\r\n    aura: 0,\r\n    baseSpeed: 0,\r\n    artifactSpeed: 0,\r\n    totalSpeed: 0,\r\n    numberOfSpeedSets: 0,\r\n    loreOfSteelPresent: false,\r\n    mode: 'none',\r\n    result: undefined,\r\n  });\r\n\r\n  function calculate(state: State) {\r\n    if (state.mode !== 'none') {\r\n      return calculationModes[state.mode](state);\r\n    }\r\n  }\r\n\r\n  function updateAndRecalculate(state: State) {\r\n    update({ ...state, result: calculate(state) });\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <h2>Real Speed Calculator</h2>\r\n      <div>\r\n        <ButtonGroup>\r\n          <Button\r\n            variant={state.mode === 'calculateRealSpeedFromTotal' ? 'primary' : 'secondary'}\r\n            onClick={() =>\r\n              updateAndRecalculate({\r\n                ...state,\r\n                mode: 'calculateRealSpeedFromTotal',\r\n              })\r\n            }\r\n          >\r\n            Calculate from total speed\r\n          </Button>\r\n          <Button\r\n            variant={state.mode === 'calculateRealSpeedFromArtifacts' ? 'primary' : 'secondary'}\r\n            onClick={() =>\r\n              updateAndRecalculate({\r\n                ...state,\r\n                mode: 'calculateRealSpeedFromArtifacts',\r\n              })\r\n            }\r\n          >\r\n            Calculate from artifact speed\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <br />\r\n      {state.result !== undefined && state.result > 0 && (\r\n        <Alert variant=\"success\">\r\n          <Alert.Heading>Real speed of a champion:</Alert.Heading>\r\n          {state.result.toFixed(ROUND_TO_DECIMAL_PLACES)}\r\n        </Alert>\r\n      )}\r\n      {state.mode === 'calculateRealSpeedFromTotal' && (\r\n        <TotalSpeedCalculator update={updateAndRecalculate} state={state} />\r\n      )}\r\n      {state.mode === 'calculateRealSpeedFromArtifacts' && (\r\n        <ArtifactSpeedCalculator update={updateAndRecalculate} state={state} />\r\n      )}\r\n    </Form>\r\n  );\r\n}\r\n\r\ntype FieldProps = {\r\n  controlId: string;\r\n  label: string;\r\n  onInput: React.FormEventHandler<HTMLInputElement>;\r\n};\r\n\r\nfunction TextField({ controlId, label, value, onInput }: FieldProps & { value: FormControlProps['value'] }) {\r\n  return (\r\n    <Form.Group controlId={controlId}>\r\n      <Form.Label>{label}</Form.Label>\r\n      <Form.Control type=\"textbox\" value={value} onInput={onInput} />\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\nfunction CheckField({ controlId, label, checked, onInput: onChange }: FieldProps & { checked: boolean }) {\r\n  return (\r\n    <Form.Group controlId={controlId}>\r\n      <Form.Check type=\"checkbox\" inline checked={checked} onChange={onChange} />\r\n      <Form.Label>{label}</Form.Label>\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\ntype CalculatorFieldProps = {\r\n  state: State;\r\n  update: Update;\r\n};\r\n\r\nfunction AuraField({ state, update }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"aura\"\r\n      label=\"Aura\"\r\n      value={state.aura}\r\n      onInput={(e) => update({ ...state, aura: toInt(e.currentTarget.value) })}\r\n    />\r\n  );\r\n}\r\n\r\nfunction BaseSpeedField({ state, update }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"base-speed\"\r\n      label=\"Base speed\"\r\n      value={state.baseSpeed}\r\n      onInput={(e) => update({ ...state, baseSpeed: toInt(e.currentTarget.value) })}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TotalSpeedField({ state, update }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"total-speed\"\r\n      label=\"Total speed\"\r\n      value={state.totalSpeed}\r\n      onInput={(e) => update({ ...state, totalSpeed: toInt(e.currentTarget.value) })}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ArtifactSpeedField({ state, update }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"artifact-speed\"\r\n      label=\"Artifact speed\"\r\n      value={state.artifactSpeed}\r\n      onInput={(e) => update({ ...state, artifactSpeed: toFloat(e.currentTarget.value) })}\r\n    />\r\n  );\r\n}\r\n\r\nfunction NumberOfSpeedSetsField({ state, update }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"number-of-speed-sets\"\r\n      label=\"Number of speed sets\"\r\n      value={state.numberOfSpeedSets}\r\n      onInput={(e) =>\r\n        update({\r\n          ...state,\r\n          numberOfSpeedSets: toSpeedSetNumber(e.currentTarget.value),\r\n        })\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction LoreOfSteelPresentField({ state, update }: CalculatorFieldProps) {\r\n  return (\r\n    <CheckField\r\n      controlId=\"lore-of-steel-present\"\r\n      label=\"Lore of steel present\"\r\n      checked={state.loreOfSteelPresent}\r\n      onInput={() =>\r\n        update({\r\n          ...state,\r\n          loreOfSteelPresent: !state.loreOfSteelPresent,\r\n        })\r\n      }\r\n    />\r\n  );\r\n}\r\nfunction TotalSpeedCalculator(props: CalculatorFieldProps) {\r\n  return (\r\n    <>\r\n      <AuraField {...props} />\r\n      <BaseSpeedField {...props} />\r\n      <TotalSpeedField {...props} />\r\n      <NumberOfSpeedSetsField {...props} />\r\n      <LoreOfSteelPresentField {...props} />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ArtifactSpeedCalculator(props: CalculatorFieldProps) {\r\n  return (\r\n    <>\r\n      <AuraField {...props} />\r\n      <BaseSpeedField {...props} />\r\n      <ArtifactSpeedField {...props} />\r\n      <NumberOfSpeedSetsField {...props} />\r\n      <LoreOfSteelPresentField {...props} />\r\n    </>\r\n  );\r\n}\r\n","import { getFillRate } from \"./turnMeter\";\r\n\r\nexport type BuffDebuffState = {\r\n  value: number;\r\n  turns: number;\r\n};\r\nexport type BuffDebuffInfo = { name: string };\r\n\r\nexport type BuffDebuff = BuffDebuffState & BuffDebuffInfo;\r\n\r\nexport type ChampionGameState = {\r\n  speed: number;\r\n  turnMeter: number;\r\n  buffs: BuffDebuff[];\r\n  deBuffs: BuffDebuff[];\r\n} & ChampionId;\r\nexport type ChampionState = {\r\n  speed?: number;\r\n  championName?: string;\r\n};\r\n\r\nexport type TeamSpots = \"team1\" | \"team2\";\r\n\r\nexport type TeamsState = Record<TeamSpots, ChampionState[]>;\r\nexport type GameState = { participants: ChampionGameState[] } & {\r\n  turnOwner?: ChampionId;\r\n};\r\n\r\nexport type BattleLogEvent = {\r\n  info: string;\r\n  order: number;\r\n} & ChampionId;\r\n\r\nexport type BattleState = { battleEvents: BattleLogEvent[] } & {\r\n  teams: TeamsState;\r\n} & { game: GameState } & {\r\n  activeGame: boolean;\r\n};\r\n\r\nexport type ChampionId = { champ: number; team: TeamSpots };\r\n\r\nexport function sameChampion(one: ChampionId, another: ChampionId) {\r\n  return another.champ === one.champ && another.team === one.team;\r\n}\r\nexport type ChampionFilterCriteria = {\r\n  champ?: number | \"none\";\r\n  team: TeamSpots;\r\n};\r\n\r\nexport function sameChampionOrTeam(\r\n  { team, champ = \"none\" }: ChampionFilterCriteria,\r\n  filteredChampion: ChampionId\r\n) {\r\n  return (\r\n    (champ !== \"none\" &&\r\n      filteredChampion.champ === champ &&\r\n      filteredChampion.team === team) ||\r\n    (champ === \"none\" && filteredChampion.team === team)\r\n  );\r\n}\r\n\r\nexport type ChampionSpots = number;\r\n\r\nexport interface Modifier {\r\n  apply(champion: ChampionGameState): ChampionGameState;\r\n  toString(): string;\r\n}\r\nexport class TurnMeterFill implements Modifier {\r\n  amount: number;\r\n  constructor(amount: number) {\r\n    this.amount = amount;\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    const { turnMeter, ...rest } = champion;\r\n\r\n    return { turnMeter: turnMeter + this.amount, ...rest };\r\n  }\r\n  toString() {\r\n    return `fills TM ${this.amount}%`;\r\n  }\r\n}\r\n\r\nexport class TurnMeterDeplete implements Modifier {\r\n  amount: number;\r\n  constructor(amount: number) {\r\n    this.amount = amount;\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    const { turnMeter, ...rest } = champion;\r\n\r\n    return { turnMeter: Math.max(0, turnMeter - this.amount), ...rest };\r\n  }\r\n  toString() {\r\n    return `depletes TM ${this.amount}%`;\r\n  }\r\n}\r\n\r\nfunction replaceBuffDebuff(buffsDebuffs: BuffDebuff[], buffDebuff: BuffDebuff) {\r\n  const rest = buffsDebuffs.filter(\r\n    bd => bd.name !== buffDebuff.name && bd.value !== buffDebuff.value\r\n  );\r\n\r\n  return [...rest, { ...buffDebuff }];\r\n}\r\nexport class ApplySpeedBuff implements Modifier {\r\n  buff: BuffDebuff;\r\n  constructor(buff: BuffDebuffState) {\r\n    this.buff = { ...buff, name: \"speed buff\" };\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    return { ...champion, buffs: replaceBuffDebuff(champion.buffs, this.buff) };\r\n  }\r\n  toString() {\r\n    return `${this.buff.name} ${this.buff.value}% for ${\r\n      this.buff.turns\r\n    } turn(s)`;\r\n  }\r\n}\r\n\r\nexport class ApplySpeedDebuff implements Modifier {\r\n  debuff: BuffDebuff;\r\n\r\n  constructor(debuff: BuffDebuffState) {\r\n    this.debuff = { ...debuff, name: \"speed debuff\" };\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    return { ...champion, deBuffs: [...champion.deBuffs, this.debuff] };\r\n  }\r\n  toString() {\r\n    return `${this.debuff.name} ${this.debuff.value}% for ${\r\n      this.debuff.turns\r\n    } turn(s)`;\r\n  }\r\n}\r\nexport class SkillDefinition {\r\n  teamModifiers: Modifier[];\r\n  opposingTeamModifiers: Modifier[];\r\n  constructor({\r\n    teamModifiers = [],\r\n    opposingTeamModifiers = []\r\n  }: SkillDefinitionParams) {\r\n    this.teamModifiers = teamModifiers;\r\n    this.opposingTeamModifiers = opposingTeamModifiers;\r\n  }\r\n\r\n  toString() {\r\n    const result: string[] = [];\r\n\r\n    if (this.teamModifiers.length > 0) {\r\n      result.push(\r\n        `Allies: ${this.teamModifiers.map(s => s.toString()).join(\", \")}`\r\n      );\r\n    }\r\n    if (this.opposingTeamModifiers.length > 0) {\r\n      result.push(\r\n        `Enemies: ${this.opposingTeamModifiers\r\n          .map(s => s.toString())\r\n          .join(\", \")}`\r\n      );\r\n    }\r\n    if (result.length === 0) {\r\n      return \"Default\";\r\n    }\r\n    return result.join(\". \");\r\n  }\r\n}\r\nexport type SkillDefinitionParams = {\r\n  teamModifiers?: Modifier[];\r\n  opposingTeamModifiers?: Modifier[];\r\n};\r\n\r\nexport const aoe15TurnMeterFill30SpeedBuff = new SkillDefinition({\r\n  teamModifiers: [\r\n    new TurnMeterFill(15),\r\n    new ApplySpeedBuff({ value: 30, turns: 2 })\r\n  ]\r\n});\r\n\r\nexport const aoe20TurnMeterFill = new SkillDefinition({\r\n  teamModifiers: [new TurnMeterFill(20)]\r\n});\r\nexport const aoe30TurnMeterFill = new SkillDefinition({\r\n  teamModifiers: [new TurnMeterFill(30)]\r\n});\r\nexport const aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease = new SkillDefinition(\r\n  {\r\n    teamModifiers: [\r\n      new TurnMeterFill(30),\r\n      new ApplySpeedBuff({ value: 30, turns: 2 })\r\n    ],\r\n    opposingTeamModifiers: [new TurnMeterDeplete(30)]\r\n  }\r\n);\r\n\r\nexport const aoe30SpeedDebuffEnemy = new SkillDefinition({\r\n  opposingTeamModifiers: [new ApplySpeedDebuff({ value: 30, turns: 2 })]\r\n});\r\n\r\nexport const defaultSkill = new SkillDefinition({});\r\n\r\nexport type SpeedChange = ChampionId & { speed: number };\r\n\r\nexport type SkillUse = ChampionId & {\r\n  skill: SkillDefinition;\r\n};\r\n\r\nexport type Actions =\r\n  | { type: \"SpeedChanged\"; payload: SpeedChange }\r\n  | { type: \"ToggleChampion\"; payload: ChampionId }\r\n  | { type: \"Tick\" }\r\n  | { type: \"Reset\" }\r\n  | { type: \"ToggleBattle\" }\r\n  | { type: \"UseSkill\"; payload: SkillUse };\r\n\r\nexport type Skill = {};\r\n\r\nexport type SkillMapState = {\r\n  championId: ChampionId;\r\n  skills: ChampionDefinition;\r\n};\r\n\r\nexport const championDefinitions: ChampionDefinition[] = [\r\n  { name: \"Arbiter\", activeSkills: [], passiveSkills: [] }\r\n];\r\n\r\nexport type ChampionDefinition = {\r\n  name: string;\r\n  activeSkills: Skill[];\r\n  passiveSkills: Skill[];\r\n};\r\n\r\nexport const initialSkillMappingsState: SkillMapState[] = [\r\n  {\r\n    championId: { champ: 0, team: \"team1\" },\r\n    skills: championDefinitions[0]\r\n  }\r\n];\r\n\r\nexport function orderChampionsByTurnMeter(state: BattleState) {\r\n  return state.game.participants.sort((c1, c2) => c2.turnMeter - c1.turnMeter);\r\n}\r\n\r\nfunction calculateTurnMeter(champ: ChampionGameState) {\r\n  return champ.turnMeter + getFillRate(champ.speed);\r\n}\r\n\r\nexport function updateTurnMeter(\r\n  participants: ChampionGameState[]\r\n): ChampionGameState[] {\r\n  return participants.map(participants => ({\r\n    ...participants,\r\n    turnMeter: calculateTurnMeter(participants)\r\n  }));\r\n}\r\n\r\nexport function resetTurnMeterAndBuffsDeBuffs(\r\n  participants: ChampionGameState[]\r\n): ChampionGameState[] {\r\n  const newParticipants = [...participants];\r\n\r\n  return newParticipants.map(newParticipant => ({\r\n    ...newParticipant,\r\n    turnMeter: 0,\r\n    speedBuff: [],\r\n    speedDebuff: []\r\n  }));\r\n}\r\n\r\nexport function fillChampionSpots(\r\n  team1PlayersCount: number,\r\n  team2PlayersCount: number\r\n) {\r\n  return {\r\n    team1: Array.from(Array(team1PlayersCount), () => ({})),\r\n    team2: Array.from(Array(team2PlayersCount), () => ({}))\r\n  };\r\n}\r\n","export function getFillRate(speed: number) {\r\n  return speed * 0.07;\r\n}\r\n","import {\r\n  BattleState,\r\n  Actions,\r\n  updateTurnMeter,\r\n  orderChampionsByTurnMeter,\r\n  TeamSpots,\r\n  Modifier,\r\n  resetTurnMeterAndBuffsDeBuffs,\r\n  fillChampionSpots,\r\n  ChampionGameState,\r\n  sameChampion,\r\n  sameChampionOrTeam,\r\n  ChampionFilterCriteria\r\n} from \"./state\";\r\n\r\nexport const initialArenaState: BattleState = {\r\n  activeGame: false,\r\n  battleEvents: [],\r\n  game: {\r\n    participants: []\r\n  },\r\n  teams: fillChampionSpots(5, 1)\r\n};\r\n\r\nfunction modifyParticipants(\r\n  participants: ChampionGameState[],\r\n  filteringCriteria: ChampionFilterCriteria,\r\n  modify: (participant: ChampionGameState) => ChampionGameState\r\n) {\r\n  return [\r\n    ...participants.filter(p => !sameChampionOrTeam(filteringCriteria, p)),\r\n    ...participants\r\n      .filter(p => sameChampionOrTeam(filteringCriteria, p))\r\n      .map(modify)\r\n  ];\r\n}\r\n\r\nconst newParticipantDefaults: ChampionGameState = {\r\n  champ: 0,\r\n  team: \"team1\",\r\n  speed: 0,\r\n  turnMeter: 0,\r\n  buffs: [],\r\n  deBuffs: []\r\n};\r\n\r\nexport function battleReducer(\r\n  state: BattleState,\r\n  action: Actions\r\n): BattleState {\r\n  switch (action.type) {\r\n    case \"SpeedChanged\": {\r\n      const { team, champ, speed } = action.payload;\r\n\r\n      const otherParticipants = state.game.participants.filter(\r\n        p => !sameChampion(p, { team, champ })\r\n      );\r\n\r\n      let currentParticipant = state.game.participants.find(p =>\r\n        sameChampion(p, { team, champ })\r\n      );\r\n\r\n      if (currentParticipant === undefined) {\r\n        currentParticipant = {\r\n          ...newParticipantDefaults,\r\n          team,\r\n          champ\r\n        };\r\n      }\r\n\r\n      const newState: BattleState = {\r\n        ...state,\r\n        game: {\r\n          ...state.game,\r\n          participants: [...otherParticipants, currentParticipant]\r\n        },\r\n        teams: {\r\n          ...state.teams,\r\n          [team]: [...state.teams[team]]\r\n        }\r\n      };\r\n\r\n      newState.teams[team][champ] = { ...state.teams[team][champ], speed };\r\n\r\n      newState.game.participants = modifyParticipants(\r\n        newState.game.participants,\r\n        { team, champ },\r\n        participant => ({ ...participant, speed })\r\n      );\r\n\r\n      return newState;\r\n    }\r\n    case \"ToggleBattle\": {\r\n      return {\r\n        ...state,\r\n        activeGame: !state.activeGame\r\n      };\r\n    }\r\n    case \"Tick\": {\r\n      if (state.game.participants.length > 0) {\r\n        const newState: BattleState = {\r\n          ...state,\r\n          game: {\r\n            ...state.game,\r\n            participants: updateTurnMeter(state.game.participants)\r\n          }\r\n        };\r\n        const orderedChampions = orderChampionsByTurnMeter(newState);\r\n\r\n        const activeChampion = orderedChampions[0];\r\n\r\n        const { champ, team, turnMeter } = activeChampion;\r\n        if (turnMeter >= 100) {\r\n          newState.game.turnOwner = { champ, team };\r\n        }\r\n\r\n        return newState;\r\n      }\r\n      return state;\r\n    }\r\n    case \"Reset\": {\r\n      const newState: BattleState = {\r\n        ...state,\r\n        battleEvents: [],\r\n        game: {\r\n          ...state.game,\r\n          participants: resetTurnMeterAndBuffsDeBuffs(state.game.participants)\r\n        }\r\n      };\r\n\r\n      return newState;\r\n    }\r\n    case \"UseSkill\": {\r\n      if (state.game.turnOwner) {\r\n        const { team, champ } = state.game.turnOwner;\r\n        const opposingTeam = getOpposingTeam(team);\r\n        const { payload } = action;\r\n\r\n        let participants = modifyParticipants(\r\n          state.game.participants,\r\n          { team, champ },\r\n          participant => {\r\n            const newParticipant = { ...participant, turnMeter: 0 };\r\n            newParticipant.buffs = newParticipant.buffs\r\n              .map(b => ({ ...b, turns: --b.turns }))\r\n              .filter(b => b.turns > 0);\r\n            newParticipant.deBuffs = newParticipant.deBuffs\r\n              .map(b => ({ ...b, turns: --b.turns }))\r\n              .filter(b => b.turns > 0);\r\n\r\n            return newParticipant;\r\n          }\r\n        );\r\n\r\n        participants = modifyParticipants(participants, { team }, participant =>\r\n          applyModifiers(participant, payload.skill.teamModifiers)\r\n        );\r\n\r\n        participants = modifyParticipants(\r\n          participants,\r\n          { team: opposingTeam },\r\n          participant =>\r\n            applyModifiers(participant, payload.skill.opposingTeamModifiers)\r\n        );\r\n\r\n        const newState: BattleState = {\r\n          ...state,\r\n          battleEvents: [\r\n            ...state.battleEvents,\r\n            {\r\n              champ,\r\n              team,\r\n              info: payload.skill.toString(),\r\n              order: state.battleEvents.length + 1\r\n            }\r\n          ],\r\n          game: {\r\n            ...state.game,\r\n            participants,\r\n            turnOwner: undefined\r\n          }\r\n        };\r\n\r\n        return newState;\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    default:\r\n      throw new Error(\"unknown dispatch type\");\r\n  }\r\n}\r\n\r\nfunction getOpposingTeam(team: TeamSpots): TeamSpots {\r\n  if (team === \"team1\") return \"team2\";\r\n  return \"team1\";\r\n}\r\n\r\nfunction applyModifiers(participant: ChampionGameState, modifiers: Modifier[]) {\r\n  let result = participant;\r\n  for (const modifier of modifiers) {\r\n    result = modifier.apply(participant);\r\n  }\r\n  return result;\r\n}\r\n","import * as React from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport function Ticker({\r\n  onTick,\r\n  enable = false\r\n}: {\r\n  onTick: () => void;\r\n  enable?: boolean;\r\n}) {\r\n  useEffect(() => {\r\n    const interval = window.setInterval(() => {\r\n      if (enable) {\r\n        onTick();\r\n      }\r\n    }, 200);\r\n    return () => {\r\n      window.clearTimeout(interval);\r\n    };\r\n  });\r\n  return <React.Fragment />;\r\n}\r\n","import * as React from \"react\";\r\nimport { numberRoundDecimal } from \"../SpeedCalculator/speed\";\r\n\r\nexport function ProgressBar({ filled = 0 }) {\r\n  const progressStyle: React.CSSProperties = {\r\n    width: `${Math.min(filled, 100)}%`\r\n  };\r\n  return (\r\n    <div className=\"ProgressBar\">\r\n      <div className=\"Progress\" style={progressStyle}>\r\n        {numberRoundDecimal(filled, 2)}%\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Card, Form, Row, Col, Badge } from 'react-bootstrap';\r\nimport { ChampionState, ChampionId, SpeedChange, BuffDebuff, ChampionGameState } from './state';\r\nimport { ProgressBar } from './ProgressBar';\r\n\r\nfunction toFloat(str: string) {\r\n  return parseFloat(str) || 0;\r\n}\r\n\r\nexport type ChampionProps = {\r\n  state: ChampionState;\r\n  gameState?: ChampionGameState;\r\n  currentlyActive: boolean;\r\n  onSpeedChanged: (args: SpeedChange) => void;\r\n} & ChampionId;\r\n\r\nfunction BuffsDebuffsInfo(\r\n  props: { info: BuffDebuff[] } & {\r\n    type: 'buff' | 'debuff';\r\n  }\r\n) {\r\n  return (\r\n    <>\r\n      {props.info.map((i) => (\r\n        <>\r\n          <Badge variant={props.type === 'buff' ? 'primary' : 'danger'}>\r\n            {i.name} {i.value}% turns {i.turns}\r\n          </Badge>{' '}\r\n        </>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function Champion({ champ, team, state, gameState, currentlyActive, onSpeedChanged }: ChampionProps) {\r\n  const championId = { champ, team };\r\n  return (\r\n    <Card bg=\"light\" border={currentlyActive ? 'primary' : undefined} style={{ marginBottom: '20px' }}>\r\n      <Card.Header>\r\n        {team} champ{champ + 1}\r\n      </Card.Header>\r\n      <Card.Body>\r\n        {gameState && (\r\n          <Card.Title>\r\n            <ProgressBar filled={gameState.turnMeter} />\r\n          </Card.Title>\r\n        )}\r\n        <Card.Text as=\"div\">\r\n          <Form>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"6\">\r\n                Speed\r\n              </Form.Label>\r\n              <Col>\r\n                <Form.Control\r\n                  value={state.speed}\r\n                  onChange={(e) =>\r\n                    onSpeedChanged({\r\n                      ...championId,\r\n                      speed: toFloat(e.target.value),\r\n                    })\r\n                  }\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            {gameState && (\r\n              <>\r\n                <BuffsDebuffsInfo type=\"buff\" info={gameState.buffs} />\r\n                <BuffsDebuffsInfo type=\"debuff\" info={gameState.deBuffs} />\r\n              </>\r\n            )}\r\n          </Form>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, ButtonGroup, Container, Form, Col, Row, ListGroup, Badge } from 'react-bootstrap';\r\nimport { useReducer } from 'react';\r\nimport { battleReducer, initialArenaState } from './battleReducer';\r\n\r\nimport { Ticker } from './Ticker';\r\nimport { Champion, ChampionProps } from './Champion';\r\n\r\nimport {\r\n  ChampionId,\r\n  aoe15TurnMeterFill30SpeedBuff,\r\n  aoe20TurnMeterFill,\r\n  aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease,\r\n  aoe30SpeedDebuffEnemy,\r\n  defaultSkill,\r\n  aoe30TurnMeterFill,\r\n  TeamSpots,\r\n  BattleLogEvent,\r\n  ChampionState,\r\n  ChampionGameState,\r\n  sameChampion,\r\n  SkillDefinition,\r\n} from './state';\r\n\r\nfunction ChampionInfo(props: ChampionId) {\r\n  return (\r\n    <>\r\n      <Badge variant={props.team === 'team1' ? 'warning' : 'info'}>\r\n        {props.team} champ{props.champ + 1}\r\n      </Badge>\r\n    </>\r\n  );\r\n}\r\ntype BattleLogProps = {\r\n  events: BattleLogEvent[];\r\n};\r\n\r\nfunction BattleLog({ events = [] }: BattleLogProps) {\r\n  return (\r\n    <ListGroup>\r\n      {events.map(({ info, champ, team, order }) => {\r\n        return (\r\n          <ListGroup.Item>\r\n            <b>{order}</b>: Champion <ChampionInfo {...{ champ, team }} /> used{' '}\r\n            <span style={{ fontWeight: 'bold' }}>{info}</span> skill\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n}\r\ntype TeamProps = {\r\n  onSpeedChanged: ChampionProps['onSpeedChanged'];\r\n  activeMember?: ChampionId;\r\n  team: TeamSpots;\r\n  teamMembers: ChampionState[];\r\n  teamMembersGameData: ChampionGameState[];\r\n};\r\nfunction Team({ onSpeedChanged, activeMember, team, teamMembers, teamMembersGameData }: TeamProps) {\r\n  const indexedTeam = teamMembers.map((state, champ) => ({\r\n    team,\r\n    champ,\r\n    state,\r\n  }));\r\n\r\n  function isActive(championId: ChampionId) {\r\n    return (activeMember && sameChampion(activeMember, championId)) || false;\r\n  }\r\n\r\n  function getGameData(id: ChampionId) {\r\n    return teamMembersGameData.find((m) => sameChampion(id, m));\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        {indexedTeam.map(({ champ, team, state }) => {\r\n          return (\r\n            <Col sm={6} md={6} lg={3} key={`${team}-${champ}`}>\r\n              <Champion\r\n                {...{ team, champ, state, onSpeedChanged }}\r\n                gameState={getGameData({ team, champ })}\r\n                currentlyActive={isActive({ champ, team })}\r\n              />\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport function BattleSimulator() {\r\n  const [arenaState, arenaDispatch] = useReducer(battleReducer, initialArenaState);\r\n  const { turnOwner } = arenaState.game;\r\n\r\n  const enabled = turnOwner === undefined && arenaState.activeGame;\r\n\r\n  function dispatchUseSkill(skill: SkillDefinition) {\r\n    arenaDispatch({\r\n      type: 'UseSkill',\r\n      payload: {\r\n        skill,\r\n        ...turnOwner!,\r\n      },\r\n    });\r\n  }\r\n  const skills = [\r\n    aoe15TurnMeterFill30SpeedBuff,\r\n    aoe30SpeedDebuffEnemy,\r\n    aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease,\r\n    aoe20TurnMeterFill,\r\n    aoe30TurnMeterFill,\r\n  ];\r\n  return (\r\n    <>\r\n      <Ticker enable={enabled} onTick={() => arenaDispatch({ type: 'Tick' })} />\r\n\r\n      <h1>Turn Simulator</h1>\r\n\r\n      <Container fluid>\r\n        <Row>\r\n          <Col sm={12} md={12} lg={9}>\r\n            {!turnOwner && (\r\n              <>\r\n                <h4>Game settings</h4>\r\n                <Container fluid>\r\n                  <Row>\r\n                    <Col>\r\n                      <Form.Check\r\n                        type=\"switch\"\r\n                        inline\r\n                        id=\"continuous-ticks\"\r\n                        label=\"Emit ticks continuously\"\r\n                        onChange={() => arenaDispatch({ type: 'ToggleBattle' })}\r\n                        checked={arenaState.activeGame}\r\n                      />\r\n                      <Button variant=\"outline-secondary\" onClick={() => arenaDispatch({ type: 'Tick' })}>\r\n                        Emit single tick\r\n                      </Button>{' '}\r\n                      <Button variant=\"outline-secondary\" onClick={() => arenaDispatch({ type: 'Reset' })}>\r\n                        Reset\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n              </>\r\n            )}\r\n            {turnOwner && (\r\n              <>\r\n                <h4>Possible moves: </h4>\r\n                <Container fluid>\r\n                  <Row>\r\n                    <Col>\r\n                      <ButtonGroup vertical>\r\n                        {skills.map((s) => (\r\n                          <Button variant=\"outline-secondary\" onClick={() => dispatchUseSkill(s)}>\r\n                            {s.toString()}\r\n                          </Button>\r\n                        ))}\r\n\r\n                        <Button variant=\"outline-primary\" onClick={() => dispatchUseSkill(defaultSkill)}>\r\n                          Make a move using {defaultSkill.toString()} skill not affecting speed\r\n                        </Button>\r\n                      </ButtonGroup>\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n              </>\r\n            )}\r\n            <hr style={{ marginBottom: '40px' }} />\r\n\r\n            <h4>\r\n              <Badge variant=\"warning\">Your team</Badge>\r\n            </h4>\r\n\r\n            <Team\r\n              activeMember={turnOwner}\r\n              team=\"team1\"\r\n              teamMembers={arenaState.teams.team1}\r\n              teamMembersGameData={arenaState.game.participants}\r\n              onSpeedChanged={(payload) =>\r\n                arenaDispatch({\r\n                  type: 'SpeedChanged',\r\n                  payload,\r\n                })\r\n              }\r\n            />\r\n\r\n            <hr style={{ marginBottom: '40px' }} />\r\n\r\n            <h4>\r\n              <Badge variant=\"info\">Enemy team</Badge>\r\n            </h4>\r\n            <Team\r\n              activeMember={turnOwner}\r\n              team=\"team2\"\r\n              teamMembers={arenaState.teams.team2}\r\n              teamMembersGameData={arenaState.game.participants}\r\n              onSpeedChanged={(payload) =>\r\n                arenaDispatch({\r\n                  type: 'SpeedChanged',\r\n                  payload,\r\n                })\r\n              }\r\n            />\r\n            <hr style={{ marginBottom: '40px' }} />\r\n          </Col>\r\n\r\n          <Col lg={3}>\r\n            {arenaState.battleEvents.length > 0 && (\r\n              <>\r\n                <h4>Battle Log</h4>\r\n                <Container fluid>\r\n                  <Row>\r\n                    <Col>\r\n                      <BattleLog events={arenaState.battleEvents} />\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n                <hr style={{ marginBottom: '40px' }} />\r\n              </>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nexport function Navigation() {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">RAID: Shadow Legend calculators</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Link to=\"/\" className=\"nav-link\">\r\n            Home\r\n          </Link>\r\n          <Link className=\"nav-link\" to=\"/real-speed-calculator\">\r\n            Real speed calculator\r\n          </Link>\r\n          <Link className=\"nav-link\" to=\"/battle-simulator\">\r\n            Battle simulator\r\n          </Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { SpeedCalculator } from \"./SpeedCalculator\";\nimport { BattleSimulator } from \"./BattleSimulator\";\nimport { Container } from \"react-bootstrap\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Navigation } from \"./Navigation\";\n\nexport default function App() {\n  return (\n    <Container fluid>\n      <Router>\n        <>\n          <Navigation />\n          <Switch>\n            <Route path=\"/real-speed-calculator\">\n              <SpeedCalculator />\n            </Route>\n            <Route path=\"/battle-simulator\">\n              <BattleSimulator />\n            </Route>\n            <Route path=\"/\">\n              <div>\n                <h1>Welcome</h1>\n              </div>\n            </Route>\n          </Switch>\n        </>\n      </Router>\n    </Container>\n  );\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}