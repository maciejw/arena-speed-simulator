{"version":3,"sources":["SpeedCalculator/speed.ts","SpeedCalculator/toInt.tsx","SpeedCalculator/Components/Fields/TextField.tsx","SpeedCalculator/Components/Fields/AuraField.tsx","SpeedCalculator/BaseSpeedField.tsx","SpeedCalculator/Components/Fields/TotalSpeedField.tsx","SpeedCalculator/Components/Fields/NumberOfSpeedSetsField.tsx","SpeedCalculator/toSpeedSetNumber.tsx","SpeedCalculator/Components/Fields/CheckField.tsx","SpeedCalculator/Components/Fields/LoreOfSteelPresentField.tsx","SpeedCalculator/Components/TotalSpeedCalculator.tsx","SpeedCalculator/toFloat.tsx","SpeedCalculator/Components/Fields/ArtifactSpeedField.tsx","SpeedCalculator/Components/ArtifactSpeedCalculator.tsx","SpeedCalculator/Components/SpeedCalculator.tsx","BattleSimulator/state.ts","BattleSimulator/turnMeter.ts","BattleSimulator/compare.ts","BattleSimulator/battleReducer.ts","BattleSimulator/Components/Ticker.tsx","BattleSimulator/Components/ProgressBar.tsx","BattleSimulator/Components/ChampionBuffsDebuffsInfo.tsx","BattleSimulator/Components/SkillsMenu.tsx","BattleSimulator/Components/ChampionInfo.tsx","BattleSimulator/Components/SpeedCalculatorModal.tsx","BattleSimulator/Components/Champion.tsx","BattleSimulator/Components/Team.tsx","BattleSimulator/Components/BattleLog.tsx","BattleSimulator/Components/BattleSimulator.tsx","Navigation.tsx","App.tsx","index.tsx"],"names":["getAuraBonus","baseSpeed","aura","numberRoundDecimal","number","decimalPlaces","Math","round","Number","EPSILON","pow","getLoreOfSteelBonus","numberOfSpeedSets","loreOfSteelPresent","loreOfSeelModifier","speedSetBonus","getSpeedSetBonus","speedSetBonusWithLoreOfSteel","toInt","value","parseInt","TextField","controlId","label","onInput","Form","Group","Label","Control","type","AuraField","state","onUpdate","e","currentTarget","BaseSpeedField","TotalSpeedField","totalSpeed","NumberOfSpeedSetsField","CheckField","checked","onChange","Check","inline","LoreOfSteelPresentField","TotalSpeedCalculator","props","toFloat","parseFloat","ArtifactSpeedField","artifactSpeed","ArtifactSpeedCalculator","calculationModes","calculateRealSpeedFromArtifacts","auraBonus","loreOfSteelBonus","speedSetBonusRounded","artifactStatSubStatSpeed","realSpeedBeforeRounding","calculateRealSpeedFromTotal","loreOfSteelBonusRounded","calculationModesTexts","SpeedCalculator","onSpeedCalculated","useState","mode","result","undefined","setState","updateAndRecalculate","calculate","ButtonGroup","Object","getOwnPropertyNames","map","m","Button","key","variant","onClick","Alert","Heading","toFixed","sameChampion","one","another","champ","team","sameChampionOrTeam","filteredChampion","TurnMeterFill","amount","this","champion","turnMeter","rest","TurnMeterDeplete","max","replaceBuffDebuff","buffsDebuffs","buffDebuff","filter","bd","name","ApplySpeedBuff","buff","buffName","buffs","turns","ApplySpeedDeBuff","debuff","deBuff","deBuffName","deBuffs","SkillDefinition","teamModifiers","opposingTeamModifiers","currentTeamModifiers","length","push","s","toString","join","aoe15TurnMeterFill30SpeedBuff","aoe20TurnMeterFill","aoe30TurnMeterFill","aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease","aoe30SpeedDebuffEnemy","defaultSkill","calculateTurnMeter","multiplier","speedBuff","find","b","speedDeBuff","speed","updateTurnMeter","participants","resetTurnMeterAndBuffsDeBuffs","newParticipant","speedDebuff","fillChampionSpots","spotCount","Array","from","compare","str1","str2","modifyParticipants","filteringCriteria","modify","p","newParticipantDefaults","battleReducer","action","payload","otherParticipants","game","currentParticipant","newState","teams","participant","isGameLoopRunning","activeChampion","sort","params","x","y","reduce","acc","sortingSpecification","turnOwner","battleEvents","opposingTeam","getOpposingTeam","decrementBuffsDeBuffs","applyModifiers","skill","info","order","gameSettings","teamCounts","updateTeamCount","setting","simulationSpeed","Error","assertUnreachable","buffsDeBuffs","modifiers","apply","Ticker","onTick","enable","useEffect","interval","window","setInterval","clearTimeout","ProgressBar","now","ChampionBuffsDebuffsInfo","i","idx","Fragment","Badge","SkillsMenu","skills","onSkillUse","Dropdown","style","float","Toggle","id","size","lineHeight","Menu","Header","Item","Divider","ChampionInfo","title","SpeedCalculatorModal","onSetSpeed","modalProps","setSpeed","Modal","aria-labelledby","centered","closeButton","Title","Body","Footer","Champion","gameState","currentlyActive","onSpeedChanged","championId","show","setModalShow","ref","useRef","current","scrollIntoView","behavior","block","Card","bg","border","margin","maxWidth","Text","as","InputGroup","FormControl","placeholder","target","Append","onHide","Team","activeMember","teamMembers","teamMembersGameData","members","reverse","Container","fluid","Row","Col","sm","md","lg","BattleLog","events","ListGroup","fontWeight","BattleSimulator","useReducer","team1","team2","initialBattleState","battleState","battleDispatch","enabled","dispatchUseSkill","cardStyle","marginBottom","width","body","min","step","ToggleButtonGroup","ToggleButton","Navigation","Navbar","expand","to","className","aria-controls","Collapse","Nav","NavLink","href","App","basename","process","path","Jumbotron","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.732f0a4e.chunk.js","sourcesContent":["import { logger } from \"../logger\";\r\n\r\nexport const ROUND_TO_DECIMAL_PLACES = 2;\r\n\r\ntype NumberOfSets = 0 | 1 | 2 | 3;\r\n\r\ntype SpeedComponentParameters = {\r\n  baseSpeed: number;\r\n  artifactSpeed: number;\r\n  aura?: number;\r\n  loreOfSteelPresent?: boolean;\r\n  numberOfSpeedSets?: NumberOfSets;\r\n};\r\n\r\ntype SpeedTotalParameters = {\r\n  baseSpeed: number;\r\n  totalSpeed: number;\r\n  aura?: number;\r\n  loreOfSteelPresent?: boolean;\r\n  numberOfSpeedSets?: NumberOfSets;\r\n};\r\nexport function calculateRealSpeedFromTotal({\r\n  baseSpeed,\r\n  totalSpeed,\r\n  aura = 0,\r\n  loreOfSteelPresent = false,\r\n  numberOfSpeedSets = 0,\r\n}: SpeedTotalParameters): number {\r\n  logger(\"input parameters\", {\r\n    baseSpeed,\r\n    totalSpeed,\r\n    aura,\r\n    loreOfSteelPresent,\r\n    numberOfSpeedSets,\r\n  });\r\n\r\n  const auraBonus = getAuraBonus(baseSpeed, aura);\r\n  logger(\"auraBonus\", auraBonus);\r\n\r\n  const loreOfSteelBonus = getLoreOfSteelBonus(\r\n    baseSpeed,\r\n    numberOfSpeedSets,\r\n    loreOfSteelPresent\r\n  );\r\n  logger(\"loreOfSteelBonus\", loreOfSteelBonus);\r\n\r\n  const loreOfSteelBonusRounded = numberRoundDecimal(loreOfSteelBonus);\r\n  logger(\"loreOfSteelBonusRounded\", loreOfSteelBonusRounded);\r\n\r\n  const speedSetBonus = getSpeedSetBonus(baseSpeed, numberOfSpeedSets);\r\n  logger(\"speedSetBonus\", speedSetBonus);\r\n\r\n  const speedSetBonusRounded = numberRoundDecimal(speedSetBonus);\r\n  logger(\"speedSetBonusRounded\", speedSetBonusRounded);\r\n\r\n  const artifactSpeed =\r\n    totalSpeed - baseSpeed - loreOfSteelBonusRounded - speedSetBonusRounded;\r\n  logger(\"artifactSpeed\", artifactSpeed);\r\n\r\n  const realSpeedBeforeRounding =\r\n    auraBonus + baseSpeed + speedSetBonus + loreOfSteelBonus + artifactSpeed;\r\n\r\n  logger(\"realSpeedBeforeRounding\", realSpeedBeforeRounding);\r\n  return numberRoundDecimal(realSpeedBeforeRounding, ROUND_TO_DECIMAL_PLACES);\r\n}\r\nexport function calculateRealSpeedFromArtifacts({\r\n  baseSpeed,\r\n  artifactSpeed,\r\n  aura = 0,\r\n  loreOfSteelPresent = false,\r\n  numberOfSpeedSets = 0,\r\n}: SpeedComponentParameters): number {\r\n  logger(\"input parameters\", {\r\n    baseSpeed,\r\n    artifactSpeed,\r\n    aura,\r\n    loreOfSteelPresent,\r\n    numberOfSpeedSets,\r\n  });\r\n\r\n  const auraBonus = getAuraBonus(baseSpeed, aura);\r\n  logger(\"auraBonus\", auraBonus);\r\n\r\n  const loreOfSteelBonus = getLoreOfSteelBonus(\r\n    baseSpeed,\r\n    numberOfSpeedSets,\r\n    loreOfSteelPresent\r\n  );\r\n  logger(\"loreOfSteelBonus\", loreOfSteelBonus);\r\n\r\n  const speedSetBonus = getSpeedSetBonus(baseSpeed, numberOfSpeedSets);\r\n  logger(\"speedSetBonus\", speedSetBonus);\r\n\r\n  const speedSetBonusRounded = numberRoundDecimal(speedSetBonus);\r\n  logger(\"speedSetBonusRounded\", speedSetBonusRounded);\r\n\r\n  const artifactStatSubStatSpeed = artifactSpeed - speedSetBonusRounded;\r\n  logger(\"realArtifactSpeed\", artifactStatSubStatSpeed);\r\n\r\n  const realSpeedBeforeRounding =\r\n    baseSpeed +\r\n    auraBonus +\r\n    artifactStatSubStatSpeed +\r\n    speedSetBonus +\r\n    loreOfSteelBonus;\r\n  logger(\"realSpeedBeforeRounding\", realSpeedBeforeRounding);\r\n\r\n  return numberRoundDecimal(realSpeedBeforeRounding, ROUND_TO_DECIMAL_PLACES);\r\n}\r\nfunction getAuraBonus(baseSpeed: number, aura: number) {\r\n  const auraMultiplier = aura / 100;\r\n  return baseSpeed * auraMultiplier;\r\n}\r\nexport function numberRoundDecimal(number: number, decimalPlaces = 0): number {\r\n  return (\r\n    Math.round((number + Number.EPSILON) * Math.pow(10, decimalPlaces)) /\r\n    Math.pow(10, decimalPlaces)\r\n  );\r\n}\r\nfunction getLoreOfSteelBonus(\r\n  baseSpeed: number,\r\n  numberOfSpeedSets: NumberOfSets,\r\n  loreOfSteelPresent = false\r\n) {\r\n  const loreOfSeelModifier = loreOfSteelPresent ? 1.15 : 1;\r\n  const speedSetBonus = getSpeedSetBonus(baseSpeed, numberOfSpeedSets);\r\n  const speedSetBonusWithLoreOfSteel = speedSetBonus * loreOfSeelModifier;\r\n\r\n  return speedSetBonusWithLoreOfSteel - speedSetBonus;\r\n}\r\n\r\nfunction getSpeedSetBonus(baseSpeed: number, numberOfSpeedSets: number) {\r\n  const speedSetPercentage = 0.12;\r\n  const speedSetBonus = baseSpeed * speedSetPercentage * numberOfSpeedSets;\r\n  return speedSetBonus;\r\n}\r\n","export function toInt(value: string) {\r\n  return parseInt(value, 10) || 0;\r\n}\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { FieldProps } from \"./FieldProps\";\r\nexport function TextField({\r\n  controlId,\r\n  label,\r\n  value,\r\n  onInput,\r\n}: FieldProps & { value: React.ComponentProps<typeof Form.Control>[\"value\"] }) {\r\n  return (\r\n    <Form.Group controlId={controlId}>\r\n      <Form.Label>{label}</Form.Label>\r\n      <Form.Control type=\"textbox\" value={value} onInput={onInput} />\r\n    </Form.Group>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { toInt } from \"../../toInt\";\r\nimport { TextField } from \"./TextField\";\r\nimport { CalculatorFieldProps } from \"./CalculatorFieldProps\";\r\nexport function AuraField({ state, onUpdate }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"aura\"\r\n      label=\"Aura\"\r\n      value={state.aura}\r\n      onInput={(e) => onUpdate({ ...state, aura: toInt(e.currentTarget.value) })} />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { toInt } from \"./toInt\";\r\nimport { TextField } from \"./Components/Fields/TextField\";\r\nimport { CalculatorFieldProps } from \"./Components/Fields/CalculatorFieldProps\";\r\nexport function BaseSpeedField({ state, onUpdate }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"base-speed\"\r\n      label=\"Base speed\"\r\n      value={state.baseSpeed}\r\n      onInput={(e) =>\r\n        onUpdate({ ...state, baseSpeed: toInt(e.currentTarget.value) })\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { toInt } from \"../../toInt\";\r\nimport { TextField } from \"./TextField\";\r\nimport { CalculatorFieldProps } from \"./CalculatorFieldProps\";\r\nexport function TotalSpeedField({ state, onUpdate }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"total-speed\"\r\n      label=\"Total speed\"\r\n      value={state.totalSpeed}\r\n      onInput={(e) =>\r\n        onUpdate({ ...state, totalSpeed: toInt(e.currentTarget.value) })\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { toSpeedSetNumber } from \"../../toSpeedSetNumber\";\r\nimport { TextField } from \"./TextField\";\r\nimport { CalculatorFieldProps } from \"./CalculatorFieldProps\";\r\nexport function NumberOfSpeedSetsField({\r\n  state,\r\n  onUpdate,\r\n}: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"number-of-speed-sets\"\r\n      label=\"Number of speed sets\"\r\n      value={state.numberOfSpeedSets}\r\n      onInput={(e) =>\r\n        onUpdate({\r\n          ...state,\r\n          numberOfSpeedSets: toSpeedSetNumber(e.currentTarget.value),\r\n        })\r\n      }\r\n    />\r\n  );\r\n}\r\n","import { SpeedSetNumber } from \"./Components/SpeedCalculator\";\r\nexport function toSpeedSetNumber(value: string): SpeedSetNumber {\r\n  return ((parseInt(value, 10) || 0) % 4) as SpeedSetNumber;\r\n}\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { FieldProps } from \"./FieldProps\";\r\nexport function CheckField({\r\n  controlId,\r\n  label,\r\n  checked,\r\n  onInput: onChange,\r\n}: FieldProps & { checked: boolean }) {\r\n  return (\r\n    <Form.Group controlId={controlId}>\r\n      <Form.Check\r\n        type=\"checkbox\"\r\n        inline\r\n        checked={checked}\r\n        onChange={onChange}\r\n      />\r\n      <Form.Label>{label}</Form.Label>\r\n    </Form.Group>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { CheckField } from \"./CheckField\";\r\nimport { CalculatorFieldProps } from \"./CalculatorFieldProps\";\r\nexport function LoreOfSteelPresentField({ state, onUpdate }: CalculatorFieldProps) {\r\n  return (\r\n    <CheckField\r\n      controlId=\"lore-of-steel-present\"\r\n      label=\"Lore of steel present\"\r\n      checked={state.loreOfSteelPresent}\r\n      onInput={() => onUpdate({\r\n        ...state,\r\n        loreOfSteelPresent: !state.loreOfSteelPresent,\r\n      })} />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { CalculatorFieldProps } from \"./Fields/CalculatorFieldProps\";\r\nimport { AuraField } from \"./Fields/AuraField\";\r\nimport { BaseSpeedField } from \"../BaseSpeedField\";\r\nimport { TotalSpeedField } from \"./Fields/TotalSpeedField\";\r\nimport { NumberOfSpeedSetsField } from \"./Fields/NumberOfSpeedSetsField\";\r\nimport { LoreOfSteelPresentField } from \"./Fields/LoreOfSteelPresentField\";\r\n\r\nexport function TotalSpeedCalculator(props: CalculatorFieldProps) {\r\n  return (\r\n    <>\r\n      <AuraField {...props} />\r\n      <BaseSpeedField {...props} />\r\n      <TotalSpeedField {...props} />\r\n      <NumberOfSpeedSetsField {...props} />\r\n      <LoreOfSteelPresentField {...props} />\r\n    </>\r\n  );\r\n}\r\n","export function toFloat(value: string) {\r\n  return parseFloat(value) || 0;\r\n}\r\n","import React from 'react';\r\nimport { toFloat } from \"../../toFloat\";\r\nimport { TextField } from \"./TextField\";\r\nimport { CalculatorFieldProps } from \"./CalculatorFieldProps\";\r\nexport function ArtifactSpeedField({ state, onUpdate }: CalculatorFieldProps) {\r\n  return (\r\n    <TextField\r\n      controlId=\"artifact-speed\"\r\n      label=\"Artifact speed\"\r\n      value={state.artifactSpeed}\r\n      onInput={(e) => onUpdate({ ...state, artifactSpeed: toFloat(e.currentTarget.value) })} />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CalculatorFieldProps } from \"./Fields/CalculatorFieldProps\";\r\nimport { AuraField } from \"./Fields/AuraField\";\r\nimport { BaseSpeedField } from \"../BaseSpeedField\";\r\nimport { ArtifactSpeedField } from \"./Fields/ArtifactSpeedField\";\r\nimport { NumberOfSpeedSetsField } from \"./Fields/NumberOfSpeedSetsField\";\r\nimport { LoreOfSteelPresentField } from \"./Fields/LoreOfSteelPresentField\";\r\nexport function ArtifactSpeedCalculator(props: CalculatorFieldProps) {\r\n  return (\r\n    <>\r\n      <AuraField {...props} />\r\n      <BaseSpeedField {...props} />\r\n      <ArtifactSpeedField {...props} />\r\n      <NumberOfSpeedSetsField {...props} />\r\n      <LoreOfSteelPresentField {...props} />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport {\r\n  calculateRealSpeedFromArtifacts,\r\n  calculateRealSpeedFromTotal,\r\n  ROUND_TO_DECIMAL_PLACES,\r\n} from \"../speed\";\r\n\r\nimport { TotalSpeedCalculator } from \"./TotalSpeedCalculator\";\r\nimport { ArtifactSpeedCalculator } from \"./ArtifactSpeedCalculator\";\r\n\r\nconst calculationModes = {\r\n  calculateRealSpeedFromArtifacts,\r\n  calculateRealSpeedFromTotal,\r\n};\r\nconst calculationModesTexts: Record<keyof typeof calculationModes, string> = {\r\n  calculateRealSpeedFromTotal: \"Calculate from total speed\",\r\n  calculateRealSpeedFromArtifacts: \"Calculate from artifact speed\",\r\n};\r\n\r\nexport type SpeedSetNumber = 0 | 1 | 2 | 3;\r\n\r\ntype Mode = keyof typeof calculationModes | \"none\";\r\n\r\nexport type State = {\r\n  baseSpeed: number;\r\n  aura: number;\r\n  artifactSpeed: number;\r\n  totalSpeed: number;\r\n  numberOfSpeedSets: SpeedSetNumber;\r\n  loreOfSteelPresent: boolean;\r\n  mode: Mode;\r\n  result: number | undefined;\r\n};\r\n\r\nexport type Update = (e: State) => void;\r\n\r\ntype SpeedCalculatorProps = { onSpeedCalculated?: (speed: number) => void };\r\nexport function SpeedCalculator({\r\n  onSpeedCalculated = () => {},\r\n}: SpeedCalculatorProps) {\r\n  const [state, setState] = useState<State>({\r\n    aura: 0,\r\n    baseSpeed: 0,\r\n    artifactSpeed: 0,\r\n    totalSpeed: 0,\r\n    numberOfSpeedSets: 0,\r\n    loreOfSteelPresent: false,\r\n    mode: \"calculateRealSpeedFromTotal\",\r\n    result: undefined,\r\n  });\r\n\r\n  function calculate(state: State) {\r\n    if (state.mode !== \"none\") {\r\n      return calculationModes[state.mode](state);\r\n    }\r\n  }\r\n\r\n  function updateAndRecalculate(state: State) {\r\n    var result = calculate(state);\r\n\r\n    if (result) {\r\n      onSpeedCalculated(result);\r\n    }\r\n    setState({ ...state, result });\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <div>\r\n        <ButtonGroup>\r\n          {Object.getOwnPropertyNames(calculationModes).map((m) => {\r\n            const mode = m as keyof typeof calculationModes;\r\n            return (\r\n              <Button\r\n                key={mode}\r\n                variant={\r\n                  state.mode === mode ? \"secondary\" : \"outline-secondary\"\r\n                }\r\n                onClick={() =>\r\n                  updateAndRecalculate({\r\n                    ...state,\r\n                    mode,\r\n                  })\r\n                }\r\n              >\r\n                {calculationModesTexts[mode]}\r\n              </Button>\r\n            );\r\n          })}\r\n        </ButtonGroup>\r\n      </div>\r\n      <br />\r\n      {state.result !== undefined && state.result > 0 && (\r\n        <Alert variant=\"success\">\r\n          <Alert.Heading>Real speed of a champion:</Alert.Heading>\r\n          {state.result.toFixed(ROUND_TO_DECIMAL_PLACES)}\r\n        </Alert>\r\n      )}\r\n      {state.mode === \"calculateRealSpeedFromTotal\" && (\r\n        <TotalSpeedCalculator onUpdate={updateAndRecalculate} state={state} />\r\n      )}\r\n      {state.mode === \"calculateRealSpeedFromArtifacts\" && (\r\n        <ArtifactSpeedCalculator\r\n          onUpdate={updateAndRecalculate}\r\n          state={state}\r\n        />\r\n      )}\r\n    </Form>\r\n  );\r\n}\r\n","import { getFillRate } from \"./turnMeter\";\r\n\r\nexport type BuffDebuffState = {\r\n  value: number;\r\n  turns: number;\r\n};\r\nexport type BuffDebuffInfo = { name: string };\r\n\r\nexport type BuffDebuff = BuffDebuffState & BuffDebuffInfo;\r\n\r\nexport type ChampionGameState = {\r\n  speed: number;\r\n  turnMeter: number;\r\n  buffs: BuffDebuff[];\r\n  deBuffs: BuffDebuff[];\r\n} & ChampionId;\r\nexport type ChampionState = {\r\n  speed?: number;\r\n  championName?: string;\r\n};\r\n\r\nexport type TeamSpots = \"team1\" | \"team2\";\r\n\r\nexport type TeamsState = Record<TeamSpots, ChampionState[]>;\r\nexport type GameState = { participants: ChampionGameState[] } & {\r\n  turnOwner?: ChampionId;\r\n};\r\n\r\nexport type BattleLogEvent = {\r\n  info: string;\r\n  order: number;\r\n} & ChampionId;\r\n\r\nexport type GameSettings = {\r\n  teamCounts: Record<TeamSpots, number>;\r\n  simulationSpeed: number;\r\n};\r\n\r\nexport type BattleState = { battleEvents: BattleLogEvent[] } & {\r\n  teams: TeamsState;\r\n} & { game: GameState } & {\r\n  isGameLoopRunning: boolean;\r\n} & { gameSettings: GameSettings };\r\n\r\nexport type ChampionId = { champ: number; team: TeamSpots };\r\n\r\nexport function sameChampion(one: ChampionId, another: ChampionId) {\r\n  return another.champ === one.champ && another.team === one.team;\r\n}\r\nexport type ChampionFilterCriteria = {\r\n  champ?: number | \"none\";\r\n  team: TeamSpots;\r\n};\r\n\r\nexport function sameChampionOrTeam(\r\n  { team, champ = \"none\" }: ChampionFilterCriteria,\r\n  filteredChampion: ChampionId\r\n) {\r\n  return (\r\n    (champ !== \"none\" &&\r\n      filteredChampion.champ === champ &&\r\n      filteredChampion.team === team) ||\r\n    (champ === \"none\" && filteredChampion.team === team)\r\n  );\r\n}\r\n\r\nexport type ChampionSpots = number;\r\n\r\nexport interface Modifier {\r\n  apply(champion: ChampionGameState): ChampionGameState;\r\n  toString(): string;\r\n}\r\nexport class TurnMeterFill implements Modifier {\r\n  amount: number;\r\n  constructor(amount: number) {\r\n    this.amount = amount;\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    const { turnMeter, ...rest } = champion;\r\n\r\n    return { turnMeter: turnMeter + this.amount, ...rest };\r\n  }\r\n  toString() {\r\n    return `fills TM ${this.amount}%`;\r\n  }\r\n}\r\n\r\nexport class TurnMeterDeplete implements Modifier {\r\n  amount: number;\r\n  constructor(amount: number) {\r\n    this.amount = amount;\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    const { turnMeter, ...rest } = champion;\r\n\r\n    return { turnMeter: Math.max(0, turnMeter - this.amount), ...rest };\r\n  }\r\n  toString() {\r\n    return `depletes TM ${this.amount}%`;\r\n  }\r\n}\r\n\r\nfunction replaceBuffDebuff(buffsDebuffs: BuffDebuff[], buffDebuff: BuffDebuff) {\r\n  const rest = buffsDebuffs.filter(\r\n    (bd) => bd.name !== buffDebuff.name && bd.value !== buffDebuff.value\r\n  );\r\n\r\n  return [...rest, { ...buffDebuff }];\r\n}\r\nexport class ApplySpeedBuff implements Modifier {\r\n  static buffName = \"speed buff\";\r\n  buff: BuffDebuff;\r\n  constructor(buff: BuffDebuffState) {\r\n    this.buff = { ...buff, name: ApplySpeedBuff.buffName };\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    return { ...champion, buffs: replaceBuffDebuff(champion.buffs, this.buff) };\r\n  }\r\n  toString() {\r\n    return `${this.buff.name} ${this.buff.value}% for ${this.buff.turns} turn(s)`;\r\n  }\r\n}\r\n\r\nexport class ApplySpeedDeBuff implements Modifier {\r\n  static deBuffName = \"speed debuff\";\r\n  deBuff: BuffDebuff;\r\n  constructor(debuff: BuffDebuffState) {\r\n    this.deBuff = { ...debuff, name: ApplySpeedDeBuff.deBuffName };\r\n  }\r\n  apply(champion: ChampionGameState): ChampionGameState {\r\n    return { ...champion, deBuffs: [...champion.deBuffs, this.deBuff] };\r\n  }\r\n  toString() {\r\n    return `${this.deBuff.name} ${this.deBuff.value}% for ${this.deBuff.turns} turn(s)`;\r\n  }\r\n}\r\nexport class SkillDefinition {\r\n  currentTeamModifiers: Modifier[];\r\n  opposingTeamModifiers: Modifier[];\r\n  constructor({\r\n    teamModifiers = [],\r\n    opposingTeamModifiers = [],\r\n  }: SkillDefinitionParams) {\r\n    this.currentTeamModifiers = teamModifiers;\r\n    this.opposingTeamModifiers = opposingTeamModifiers;\r\n  }\r\n\r\n  toString() {\r\n    const result: string[] = [];\r\n\r\n    if (this.currentTeamModifiers.length > 0) {\r\n      result.push(\r\n        `Allies: ${this.currentTeamModifiers\r\n          .map((s) => s.toString())\r\n          .join(\", \")}`\r\n      );\r\n    }\r\n    if (this.opposingTeamModifiers.length > 0) {\r\n      result.push(\r\n        `Enemies: ${this.opposingTeamModifiers\r\n          .map((s) => s.toString())\r\n          .join(\", \")}`\r\n      );\r\n    }\r\n    if (result.length === 0) {\r\n      return \"Default\";\r\n    }\r\n    return result.join(\". \");\r\n  }\r\n}\r\nexport type SkillDefinitionParams = {\r\n  teamModifiers?: Modifier[];\r\n  opposingTeamModifiers?: Modifier[];\r\n};\r\n\r\nexport const aoe15TurnMeterFill30SpeedBuff = new SkillDefinition({\r\n  teamModifiers: [\r\n    new TurnMeterFill(15),\r\n    new ApplySpeedBuff({ value: 30, turns: 2 }),\r\n  ],\r\n});\r\n\r\nexport const aoe20TurnMeterFill = new SkillDefinition({\r\n  teamModifiers: [new TurnMeterFill(20)],\r\n});\r\nexport const aoe30TurnMeterFill = new SkillDefinition({\r\n  teamModifiers: [new TurnMeterFill(30)],\r\n});\r\nexport const aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease = new SkillDefinition(\r\n  {\r\n    teamModifiers: [\r\n      new TurnMeterFill(30),\r\n      new ApplySpeedBuff({ value: 30, turns: 2 }),\r\n    ],\r\n    opposingTeamModifiers: [new TurnMeterDeplete(30)],\r\n  }\r\n);\r\n\r\nexport const aoe30SpeedDebuffEnemy = new SkillDefinition({\r\n  opposingTeamModifiers: [new ApplySpeedDeBuff({ value: 30, turns: 2 })],\r\n});\r\n\r\nexport const defaultSkill = new SkillDefinition({});\r\n\r\nexport type SpeedChange = ChampionId & { speed: number };\r\n\r\nexport type SkillUse = ChampionId & {\r\n  skill: SkillDefinition;\r\n};\r\n\r\ntype Setting<T, P extends keyof T = keyof T> = {\r\n  setting: P;\r\n  value: T[P];\r\n};\r\nexport type Actions =\r\n  | { type: \"SpeedChanged\"; payload: SpeedChange }\r\n  //  | { type: \"ToggleChampion\"; payload: ChampionId }\r\n  | { type: \"Tick\" }\r\n  | { type: \"Reset\" }\r\n  | { type: \"ToggleBattle\" }\r\n  | { type: \"UseSkill\"; payload: SkillUse }\r\n  | { type: \"UpdateTeamCount\"; payload: Setting<GameSettings[\"teamCounts\"]> }\r\n  | { type: \"UpdateSimulationSpeedSettings\"; payload: number };\r\n\r\nexport type Skill = {};\r\n\r\nexport type SkillMapState = {\r\n  championId: ChampionId;\r\n  skills: ChampionDefinition;\r\n};\r\n\r\nexport const championDefinitions: ChampionDefinition[] = [\r\n  { name: \"Arbiter\", activeSkills: [], passiveSkills: [] },\r\n];\r\n\r\nexport type ChampionDefinition = {\r\n  name: string;\r\n  activeSkills: Skill[];\r\n  passiveSkills: Skill[];\r\n};\r\n\r\nexport const initialSkillMappingsState: SkillMapState[] = [\r\n  {\r\n    championId: { champ: 0, team: \"team1\" },\r\n    skills: championDefinitions[0],\r\n  },\r\n];\r\n\r\nfunction calculateTurnMeter(champ: ChampionGameState) {\r\n  let multiplier = 1;\r\n\r\n  const speedBuff = champ.buffs.find((b) => b.name === ApplySpeedBuff.buffName);\r\n  if (speedBuff) {\r\n    multiplier = multiplier * (speedBuff.value / 100 + 1);\r\n  }\r\n  const speedDeBuff = champ.deBuffs.find(\r\n    (b) => b.name === ApplySpeedDeBuff.deBuffName\r\n  );\r\n  if (speedDeBuff) {\r\n    multiplier = multiplier / (speedDeBuff.value / 100 + 1);\r\n  }\r\n\r\n  return champ.turnMeter + getFillRate(champ.speed * multiplier);\r\n}\r\n\r\nexport function updateTurnMeter(\r\n  participants: ChampionGameState[]\r\n): ChampionGameState[] {\r\n  return participants.map((participants) => ({\r\n    ...participants,\r\n    turnMeter: calculateTurnMeter(participants),\r\n  }));\r\n}\r\n\r\nexport function resetTurnMeterAndBuffsDeBuffs(\r\n  participants: ChampionGameState[]\r\n): ChampionGameState[] {\r\n  const newParticipants = [...participants];\r\n\r\n  return newParticipants.map((newParticipant) => ({\r\n    ...newParticipant,\r\n    turnMeter: 0,\r\n    speedBuff: [],\r\n    speedDebuff: [],\r\n  }));\r\n}\r\n\r\nexport function fillChampionSpots(spotCount: number) {\r\n  return Array.from(Array(spotCount), () => ({}));\r\n}\r\n","export function getFillRate(speed: number) {\r\n  return speed * 0.07;\r\n}\r\n","type SortOrder = \"asc\" | \"desc\";\r\ntype SortParam<T> = [keyof T, SortOrder?];\r\n\r\nexport function sortingSpecification<T>(\r\n  ...params: SortParam<T>[]\r\n) {\r\n  return (x: T, y: T) => {\r\n    return params.reduce((acc, [key, order = \"asc\"]) => {\r\n      const modifier = order === \"asc\" ? 1 : -1;\r\n      return acc || modifier * compare(x[key], y[key]);\r\n    }, 0);\r\n  };\r\n}\r\n\r\nexport function compare<T>(str1: T, str2: T) {\r\n  if (str1 < str2) {\r\n    return -1;\r\n  }\r\n  if (str1 > str2) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","import {\r\n  BattleState,\r\n  Actions,\r\n  updateTurnMeter,\r\n  TeamSpots,\r\n  Modifier,\r\n  resetTurnMeterAndBuffsDeBuffs,\r\n  fillChampionSpots,\r\n  ChampionGameState,\r\n  sameChampion,\r\n  sameChampionOrTeam,\r\n  ChampionFilterCriteria,\r\n  BuffDebuff,\r\n  GameSettings,\r\n} from \"./state\";\r\nimport { sortingSpecification } from \"./compare\";\r\n\r\nexport function initialBattleState({\r\n  teamCounts = { team1: 5, team2: 5 },\r\n  simulationSpeed = 300,\r\n}: Partial<GameSettings>): BattleState {\r\n  return {\r\n    isGameLoopRunning: false,\r\n    battleEvents: [],\r\n    game: {\r\n      participants: [],\r\n    },\r\n    teams: {\r\n      team1: fillChampionSpots(teamCounts.team1),\r\n      team2: fillChampionSpots(teamCounts.team2),\r\n    },\r\n    gameSettings: { teamCounts, simulationSpeed },\r\n  };\r\n}\r\n\r\nfunction modifyParticipants(\r\n  participants: ChampionGameState[],\r\n  filteringCriteria: ChampionFilterCriteria,\r\n  modify: (participant: ChampionGameState) => ChampionGameState\r\n) {\r\n  return [\r\n    ...participants.filter((p) => !sameChampionOrTeam(filteringCriteria, p)),\r\n    ...participants\r\n      .filter((p) => sameChampionOrTeam(filteringCriteria, p))\r\n      .map(modify),\r\n  ];\r\n}\r\n\r\nconst newParticipantDefaults: ChampionGameState = {\r\n  champ: 0,\r\n  team: \"team1\",\r\n  speed: 0,\r\n  turnMeter: 0,\r\n  buffs: [],\r\n  deBuffs: [],\r\n};\r\n\r\nexport function battleReducer(\r\n  state: BattleState,\r\n  action: Actions\r\n): BattleState {\r\n  switch (action.type) {\r\n    case \"SpeedChanged\": {\r\n      const { team, champ, speed } = action.payload;\r\n\r\n      const otherParticipants = state.game.participants.filter(\r\n        (p) => !sameChampion(p, { team, champ })\r\n      );\r\n\r\n      let currentParticipant = state.game.participants.find((p) =>\r\n        sameChampion(p, { team, champ })\r\n      );\r\n\r\n      if (currentParticipant === undefined) {\r\n        currentParticipant = {\r\n          ...newParticipantDefaults,\r\n          team,\r\n          champ,\r\n        };\r\n      }\r\n\r\n      const newState: BattleState = {\r\n        ...state,\r\n        game: {\r\n          ...state.game,\r\n          participants: [...otherParticipants, currentParticipant],\r\n        },\r\n        teams: {\r\n          ...state.teams,\r\n          [team]: [...state.teams[team]],\r\n        },\r\n      };\r\n\r\n      newState.teams[team][champ] = { ...state.teams[team][champ], speed };\r\n\r\n      newState.game.participants = modifyParticipants(\r\n        newState.game.participants,\r\n        { team, champ },\r\n        (participant) => ({ ...participant, speed })\r\n      );\r\n\r\n      return newState;\r\n    }\r\n    case \"ToggleBattle\": {\r\n      return {\r\n        ...state,\r\n        isGameLoopRunning: !state.isGameLoopRunning,\r\n      };\r\n    }\r\n    case \"Tick\": {\r\n      if (state.game.participants.length > 0) {\r\n        const newState: BattleState = {\r\n          ...state,\r\n          game: {\r\n            ...state.game,\r\n            participants: updateTurnMeter(state.game.participants),\r\n          },\r\n        };\r\n        const orderedChampions = newState.game.participants.sort(\r\n          sortingSpecification(\r\n            [\"turnMeter\", \"desc\"],\r\n            [\"team\"],\r\n            [\"speed\", \"desc\"],\r\n            [\"champ\"]\r\n          )\r\n        );\r\n\r\n        const activeChampion = orderedChampions[0];\r\n\r\n        const { champ, team, turnMeter } = activeChampion;\r\n        if (turnMeter >= 100) {\r\n          newState.game.turnOwner = { champ, team };\r\n        }\r\n\r\n        return newState;\r\n      }\r\n      return state;\r\n    }\r\n    case \"Reset\": {\r\n      const newState: BattleState = {\r\n        ...state,\r\n        battleEvents: [],\r\n        game: {\r\n          ...state.game,\r\n          participants: resetTurnMeterAndBuffsDeBuffs(state.game.participants),\r\n        },\r\n      };\r\n\r\n      return newState;\r\n    }\r\n    case \"UseSkill\": {\r\n      if (state.game.turnOwner) {\r\n        const { team, champ } = state.game.turnOwner;\r\n        const opposingTeam = getOpposingTeam(team);\r\n        const { payload } = action;\r\n\r\n        let participants = modifyParticipants(\r\n          state.game.participants,\r\n          { team, champ },\r\n          (participant) => {\r\n            const newParticipant = { ...participant, turnMeter: 0 };\r\n\r\n            newParticipant.buffs = decrementBuffsDeBuffs(newParticipant.buffs);\r\n            newParticipant.deBuffs = decrementBuffsDeBuffs(\r\n              newParticipant.deBuffs\r\n            );\r\n\r\n            return newParticipant;\r\n          }\r\n        );\r\n\r\n        participants = modifyParticipants(\r\n          participants,\r\n          { team },\r\n          (participant) =>\r\n            applyModifiers(participant, payload.skill.currentTeamModifiers)\r\n        );\r\n\r\n        participants = modifyParticipants(\r\n          participants,\r\n          { team: opposingTeam },\r\n          (participant) =>\r\n            applyModifiers(participant, payload.skill.opposingTeamModifiers)\r\n        );\r\n\r\n        const newState: BattleState = {\r\n          ...state,\r\n          battleEvents: [\r\n            ...state.battleEvents,\r\n            {\r\n              champ,\r\n              team,\r\n              info: payload.skill.toString(),\r\n              order: state.battleEvents.length + 1,\r\n            },\r\n          ],\r\n          game: {\r\n            ...state.game,\r\n            participants,\r\n            turnOwner: undefined,\r\n          },\r\n        };\r\n\r\n        return newState;\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    case \"UpdateTeamCount\": {\r\n      const newState: BattleState = {\r\n        ...state,\r\n        gameSettings: {\r\n          ...state.gameSettings,\r\n          teamCounts: {\r\n            ...state.gameSettings.teamCounts,\r\n            [action.payload.setting]: action.payload.value,\r\n          },\r\n        },\r\n      };\r\n      return updateTeamCount(newState, action.payload.setting);\r\n    }\r\n    case \"UpdateSimulationSpeedSettings\": {\r\n      return {\r\n        ...state,\r\n        gameSettings: {\r\n          ...state.gameSettings,\r\n          simulationSpeed: action.payload,\r\n        },\r\n      };\r\n    }\r\n  }\r\n  assertUnreachable(action);\r\n}\r\n\r\nfunction updateTeamCount(state: BattleState, team: TeamSpots): BattleState {\r\n  return {\r\n    ...state,\r\n    teams: {\r\n      ...state.teams,\r\n      [team]: fillChampionSpots(state.gameSettings.teamCounts[team]),\r\n    },\r\n    game: {\r\n      participants: [...state.game.participants.filter((p) => p.team !== team)],\r\n    },\r\n  };\r\n}\r\n\r\nfunction assertUnreachable(x: never): never {\r\n  throw new Error(\"Unreachable code\");\r\n}\r\n\r\nfunction decrementBuffsDeBuffs(buffsDeBuffs: BuffDebuff[]) {\r\n  return buffsDeBuffs\r\n    .map((b) => ({ ...b, turns: --b.turns }))\r\n    .filter((b) => b.turns > 0);\r\n}\r\n\r\nfunction getOpposingTeam(team: TeamSpots): TeamSpots {\r\n  if (team === \"team1\") return \"team2\";\r\n  return \"team1\";\r\n}\r\n\r\nfunction applyModifiers(participant: ChampionGameState, modifiers: Modifier[]) {\r\n  let result = participant;\r\n  for (const modifier of modifiers) {\r\n    result = modifier.apply(participant);\r\n  }\r\n  return result;\r\n}\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport function Ticker({\r\n  onTick,\r\n  enable,\r\n  speed,\r\n}: {\r\n  speed: number;\r\n  onTick: () => void;\r\n  enable?: boolean;\r\n}) {\r\n  useEffect(() => {\r\n    const interval = window.setInterval(() => {\r\n      if (enable) {\r\n        onTick();\r\n      }\r\n    }, speed);\r\n    return () => {\r\n      window.clearTimeout(interval);\r\n    };\r\n  });\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport BootstrapProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport { numberRoundDecimal } from \"../../internal-contracts\";\r\n\r\nexport function ProgressBar({ now = 0 }) {\r\n  return (\r\n    <BootstrapProgressBar\r\n      variant=\"success\"\r\n      now={now}\r\n      label={<>{numberRoundDecimal(now, 2)} %</>}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { BuffDebuff } from \"../state\";\r\nexport function ChampionBuffsDebuffsInfo(\r\n  props: { info: BuffDebuff[] } & {\r\n    type: \"buff\" | \"debuff\";\r\n  }\r\n) {\r\n  return (\r\n    <>\r\n      {props.info.map((i, idx) => (\r\n        <React.Fragment key={`${i.name}-${i.value}-${idx}`}>\r\n          <Badge variant={props.type === \"buff\" ? \"primary\" : \"danger\"}>\r\n            {i.name} {i.value}% turns {i.turns}\r\n          </Badge>{\" \"}\r\n        </React.Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport DropdownToggle from \"react-bootstrap/DropdownToggle\";\r\n\r\nimport { defaultSkill, SkillDefinition } from \"../state\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\n\r\nexport type SkillsProps = {\r\n  onSkillUse: (s: SkillDefinition) => void;\r\n  skills: SkillDefinition[];\r\n};\r\n\r\nfunction MenuButton() {\r\n  return (\r\n    <Button size=\"sm\" variant=\"outline-secondary\">\r\n      <GiHamburgerMenu />\r\n    </Button>\r\n  );\r\n}\r\nexport function SkillsMenu({ skills, onSkillUse }: SkillsProps) {\r\n  return (\r\n    <Dropdown style={{ float: \"right\" }}>\r\n      <Dropdown.Toggle id=\"skills\" size=\"sm\" style={{ lineHeight: 1 }} />\r\n      <Dropdown.Menu>\r\n        <Dropdown.Header>Speed related skills</Dropdown.Header>\r\n        {skills.map((s, i) => (\r\n          <Dropdown.Item key={i} onClick={() => onSkillUse(s)}>\r\n            {s.toString()}\r\n          </Dropdown.Item>\r\n        ))}\r\n        <Dropdown.Divider />\r\n        <Dropdown.Item onClick={() => onSkillUse(defaultSkill)}>\r\n          Make a move using {defaultSkill.toString()} skill not affecting speed\r\n        </Dropdown.Item>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nimport { ChampionId } from \"../state\";\r\nexport function ChampionInfo(props: ChampionId) {\r\n  return (\r\n    <>\r\n      <Badge\r\n        title={props.team}\r\n        variant={props.team === \"team1\" ? \"warning\" : \"info\"}\r\n      >\r\n        Champ {props.champ + 1}\r\n      </Badge>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { SpeedCalculator } from \"../../internal-contracts\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\ntype SpeedCalculatorModalProps = {\r\n  onSetSpeed: (speed: number) => void;\r\n} & Modal[\"props\"];\r\nexport function SpeedCalculatorModal({\r\n  onSetSpeed,\r\n  ...modalProps\r\n}: SpeedCalculatorModalProps) {\r\n  const [speed, setSpeed] = useState(0);\r\n  return (\r\n    <Modal\r\n      {...modalProps}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Real Speed Calculator\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <SpeedCalculator onSpeedCalculated={setSpeed} />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          onClick={() => {\r\n            if (speed > 0) {\r\n              onSetSpeed(speed);\r\n            }\r\n          }}\r\n        >\r\n          Set speed\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nimport {\r\n  ChampionState,\r\n  ChampionId,\r\n  SpeedChange,\r\n  ChampionGameState,\r\n  aoe15TurnMeterFill30SpeedBuff,\r\n  aoe30SpeedDebuffEnemy,\r\n  aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease,\r\n  aoe20TurnMeterFill,\r\n  aoe30TurnMeterFill,\r\n  SkillDefinition,\r\n} from \"../state\";\r\nimport { ProgressBar } from \"./ProgressBar\";\r\nimport { ChampionBuffsDebuffsInfo } from \"./ChampionBuffsDebuffsInfo\";\r\nimport { SkillsMenu } from \"./SkillsMenu\";\r\nimport { toFloat } from \"../../internal-contracts\";\r\nimport { ChampionInfo } from \"./ChampionInfo\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { AiFillCalculator } from \"react-icons/ai\";\r\nimport { SpeedCalculatorModal } from \"./SpeedCalculatorModal\";\r\n\r\nconst skills = [\r\n  aoe15TurnMeterFill30SpeedBuff,\r\n  aoe30SpeedDebuffEnemy,\r\n  aoe30TurnMeterFill30SpeedBuffEnemy30TurnMeterDecrease,\r\n  aoe20TurnMeterFill,\r\n  aoe30TurnMeterFill,\r\n];\r\n\r\nexport type ChampionProps = {\r\n  state: ChampionState;\r\n  gameState?: ChampionGameState;\r\n  currentlyActive: boolean;\r\n  onSpeedChanged: (args: SpeedChange) => void;\r\n  onSkillUse: (s: SkillDefinition) => void;\r\n} & ChampionId;\r\n\r\nexport function Champion({\r\n  champ,\r\n  team,\r\n  state,\r\n  gameState,\r\n  currentlyActive,\r\n  onSpeedChanged,\r\n  onSkillUse,\r\n}: ChampionProps) {\r\n  const championId = { champ, team };\r\n\r\n  const [show, setModalShow] = useState(false);\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    const { current } = ref;\r\n    if (current && currentlyActive) {\r\n      current.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div ref={ref} />\r\n      <Card\r\n        bg=\"light\"\r\n        border={currentlyActive ? \"primary\" : undefined}\r\n        style={{\r\n          margin: \"5px auto\",\r\n          maxWidth: \"260px\",\r\n        }}\r\n      >\r\n        <Card.Header>\r\n          <ChampionInfo {...championId} />\r\n          {currentlyActive && (\r\n            <SkillsMenu skills={skills} onSkillUse={onSkillUse} />\r\n          )}\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {gameState && (\r\n            <Card.Title>\r\n              <ProgressBar now={gameState.turnMeter} />\r\n            </Card.Title>\r\n          )}\r\n          <Card.Text as=\"div\">\r\n            <InputGroup>\r\n              <FormControl\r\n                placeholder=\"Speed\"\r\n                value={state.speed}\r\n                onChange={(e) =>\r\n                  onSpeedChanged({\r\n                    ...championId,\r\n                    speed: toFloat(e.target.value),\r\n                  })\r\n                }\r\n              />\r\n              <InputGroup.Append>\r\n                <Button\r\n                  variant=\"outline-secondary\"\r\n                  size=\"sm\"\r\n                  onClick={() => setModalShow(true)}\r\n                >\r\n                  <AiFillCalculator size=\"2em\" />\r\n                </Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n            {gameState && (\r\n              <>\r\n                <ChampionBuffsDebuffsInfo type=\"buff\" info={gameState.buffs} />\r\n                <ChampionBuffsDebuffsInfo\r\n                  type=\"debuff\"\r\n                  info={gameState.deBuffs}\r\n                />\r\n              </>\r\n            )}\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n      <SpeedCalculatorModal\r\n        show={show}\r\n        onHide={() => setModalShow(false)}\r\n        onSetSpeed={(speed) => {\r\n          onSpeedChanged({\r\n            ...championId,\r\n            speed,\r\n          });\r\n          setModalShow(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nimport { Champion, ChampionProps } from \"./Champion\";\r\nimport {\r\n  ChampionId,\r\n  ChampionState,\r\n  ChampionGameState,\r\n  TeamSpots,\r\n  sameChampion,\r\n} from \"../state\";\r\n\r\nimport { SkillsProps } from \"./SkillsMenu\";\r\n\r\nexport type TeamProps = {\r\n  onSpeedChanged: ChampionProps[\"onSpeedChanged\"];\r\n  onSkillUse: SkillsProps[\"onSkillUse\"];\r\n  activeMember?: ChampionId;\r\n  team: TeamSpots;\r\n  teamMembers: ChampionState[];\r\n  teamMembersGameData: ChampionGameState[];\r\n};\r\n\r\nexport function Team({\r\n  onSkillUse,\r\n  onSpeedChanged,\r\n  activeMember,\r\n  team,\r\n  teamMembers,\r\n  teamMembersGameData,\r\n}: TeamProps) {\r\n  const indexedTeam = teamMembers.map((state, champ) => ({\r\n    team,\r\n    champ,\r\n    state,\r\n  }));\r\n\r\n  function isActive(championId: ChampionId) {\r\n    return (activeMember && sameChampion(activeMember, championId)) || false;\r\n  }\r\n\r\n  function getGameData(id: ChampionId) {\r\n    return teamMembersGameData.find((m) => sameChampion(id, m));\r\n  }\r\n  let members = indexedTeam;\r\n  if (team === \"team2\") {\r\n    members = members.reverse();\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        {members.map(({ champ, team, state }) => {\r\n          return (\r\n            <React.Fragment key={`${team}-${champ}`}>\r\n              <Col sm=\"12\" md=\"6\" lg=\"auto\" style={{ margin: \"auto\" }}>\r\n                <Champion\r\n                  {...{ team, champ, state, onSpeedChanged, onSkillUse }}\r\n                  gameState={getGameData({ team, champ })}\r\n                  currentlyActive={isActive({ champ, team })}\r\n                />\r\n              </Col>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { ChampionInfo } from \"./ChampionInfo\";\r\nimport { BattleLogEvent } from \"../state\";\r\nexport type BattleLogProps = {\r\n  events: BattleLogEvent[];\r\n};\r\n\r\nexport function BattleLog({ events = [] }: BattleLogProps) {\r\n  return (\r\n    <ListGroup>\r\n      {events.map(({ info, champ, team, order }) => {\r\n        return (\r\n          <ListGroup.Item key={order}>\r\n            <b>{order}</b>: Champion <ChampionInfo {...{ champ, team }} /> used{\" \"}\r\n            <span style={{ fontWeight: \"bold\" }}>{info}</span> skill\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n}\r\n","import React, { useReducer } from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\n\r\nimport { battleReducer, initialBattleState } from \"../battleReducer\";\r\nimport { SkillDefinition } from \"../state\";\r\nimport { Ticker } from \"./Ticker\";\r\nimport { Team } from \"./Team\";\r\nimport { BattleLog } from \"./BattleLog\";\r\nimport { toInt } from \"../../internal-contracts\";\r\n\r\nexport function BattleSimulator() {\r\n  const [battleState, battleDispatch] = useReducer(\r\n    battleReducer,\r\n    initialBattleState({ teamCounts: { team1: 5, team2: 5 } })\r\n  );\r\n  const { turnOwner } = battleState.game;\r\n\r\n  const enabled = turnOwner === undefined && battleState.isGameLoopRunning;\r\n\r\n  function dispatchUseSkill(skill: SkillDefinition) {\r\n    battleDispatch({\r\n      type: \"UseSkill\",\r\n      payload: {\r\n        skill,\r\n        ...turnOwner!,\r\n      },\r\n    });\r\n  }\r\n  const cardStyle = { marginBottom: \"10px\" };\r\n  return (\r\n    <>\r\n      <Ticker\r\n        speed={battleState.gameSettings.simulationSpeed}\r\n        enable={enabled}\r\n        onTick={() => battleDispatch({ type: \"Tick\" })}\r\n      />\r\n\r\n      <Container fluid>\r\n        <Row>\r\n          <Col sm=\"12\" md=\"12\" lg=\"9\">\r\n            <Card style={cardStyle}>\r\n              <Card.Body>\r\n                <Team\r\n                  onSkillUse={(s) => dispatchUseSkill(s)}\r\n                  activeMember={turnOwner}\r\n                  team=\"team2\"\r\n                  teamMembers={battleState.teams.team2}\r\n                  teamMembersGameData={battleState.game.participants}\r\n                  onSpeedChanged={(payload) =>\r\n                    battleDispatch({\r\n                      type: \"SpeedChanged\",\r\n                      payload,\r\n                    })\r\n                  }\r\n                />\r\n              </Card.Body>\r\n              <Card.Footer>\r\n                <h4>\r\n                  <Badge variant=\"info\" style={{ width: \"100%\" }}>\r\n                    Enemy team\r\n                  </Badge>\r\n                </h4>\r\n              </Card.Footer>\r\n            </Card>\r\n            <Card style={cardStyle}>\r\n              <Card.Header>\r\n                <h4>\r\n                  <Badge variant=\"warning\" style={{ width: \"100%\" }}>\r\n                    Your team\r\n                  </Badge>\r\n                </h4>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <Team\r\n                  onSkillUse={(s) => dispatchUseSkill(s)}\r\n                  activeMember={turnOwner}\r\n                  team=\"team1\"\r\n                  teamMembers={battleState.teams.team1}\r\n                  teamMembersGameData={battleState.game.participants}\r\n                  onSpeedChanged={(payload) =>\r\n                    battleDispatch({\r\n                      type: \"SpeedChanged\",\r\n                      payload,\r\n                    })\r\n                  }\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n            <Card body style={cardStyle}>\r\n              <h4>Simulation settings</h4>\r\n              <Container fluid>\r\n                <Row>\r\n                  <Col sm=\"12\" md=\"6\" lg=\"6\" style={{ margin: \"5px auto\" }}>\r\n                    <Form.Group>\r\n                      <Form.Label>\r\n                        <Badge variant=\"info\">Enemy team member count</Badge>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type=\"range\"\r\n                        min={1}\r\n                        max={5}\r\n                        step={1}\r\n                        value={battleState.gameSettings.teamCounts.team2}\r\n                        onChange={(e) =>\r\n                          battleDispatch({\r\n                            type: \"UpdateTeamCount\",\r\n                            payload: {\r\n                              setting: \"team2\",\r\n                              value: toInt(e.target.value) % 6,\r\n                            },\r\n                          })\r\n                        }\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col sm=\"12\" md=\"6\" lg=\"6\" style={{ margin: \"5px auto\" }}>\r\n                    <Form.Group>\r\n                      <Form.Label>\r\n                        <Badge variant=\"warning\">Your team member count</Badge>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type=\"range\"\r\n                        min={1}\r\n                        max={5}\r\n                        step={1}\r\n                        value={battleState.gameSettings.teamCounts.team1}\r\n                        onChange={(e) =>\r\n                          battleDispatch({\r\n                            type: \"UpdateTeamCount\",\r\n                            payload: {\r\n                              setting: \"team1\",\r\n                              value: toInt(e.target.value) % 6,\r\n                            },\r\n                          })\r\n                        }\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Form.Group controlId=\"simulation-speed\">\r\n                      <Form.Label>Simulation speed</Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) =>\r\n                          battleDispatch({\r\n                            type: \"UpdateSimulationSpeedSettings\",\r\n                            payload: toInt(e.target.value),\r\n                          })\r\n                        }\r\n                        title={`Current value ${battleState.gameSettings.simulationSpeed}ms`}\r\n                        type=\"range\"\r\n                        value={battleState.gameSettings.simulationSpeed}\r\n                        min={100}\r\n                        max={1000}\r\n                        step={50}\r\n                      />\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <ButtonGroup>\r\n                      <Button\r\n                        variant=\"outline-secondary\"\r\n                        onClick={() => battleDispatch({ type: \"Tick\" })}\r\n                      >\r\n                        Emit single tick\r\n                      </Button>{\" \"}\r\n                      <ToggleButtonGroup\r\n                        type=\"checkbox\"\r\n                        onChange={() =>\r\n                          battleDispatch({ type: \"ToggleBattle\" })\r\n                        }\r\n                        value={[battleState.isGameLoopRunning]}\r\n                      >\r\n                        <ToggleButton value={true} variant=\"outline-secondary\">\r\n                          Emit ticks continuously\r\n                        </ToggleButton>\r\n                      </ToggleButtonGroup>\r\n                      <Button\r\n                        variant=\"outline-secondary\"\r\n                        onClick={() => battleDispatch({ type: \"Reset\" })}\r\n                      >\r\n                        Reset turn meters and buffs/debuffs\r\n                      </Button>\r\n                    </ButtonGroup>\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"3\">\r\n            {battleState.battleEvents.length > 0 && (\r\n              <>\r\n                <h4>Battle Log</h4>\r\n                <Container fluid>\r\n                  <Row>\r\n                    <Col>\r\n                      <BattleLog events={battleState.battleEvents} />\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n                <hr style={{ marginBottom: \"40px\" }} />\r\n              </>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport NavLink from \"react-bootstrap/NavLink\";\r\nimport { AiFillGithub } from \"react-icons/ai\";\r\nimport { Button } from \"react-bootstrap\";\r\nexport function Navigation() {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n      <Link to=\"/\" className=\"navbar-brand\">\r\n        RAID: Shadow Legends simulator\r\n      </Link>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Link className=\"nav-link\" to=\"/battle-simulator\">\r\n            Battle simulator\r\n          </Link>\r\n          <Link className=\"nav-link\" to=\"/real-speed-calculator\">\r\n            Real speed calculator\r\n          </Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <Navbar.Collapse id=\"extra-navbar-nav\">\r\n        <Nav>\r\n          <NavLink\r\n            title=\"Project repository\"\r\n            href=\"https://github.com/maciejw/raid-calculators/\"\r\n          >\r\n            <AiFillGithub size=\"2rem\" />\r\n          </NavLink>\r\n          <NavLink\r\n            title=\"Create issue on github\"\r\n            target=\"_new\"\r\n            href=\"https://github.com/maciejw/raid-calculators/issues/new\"\r\n          >\r\n            <Button size=\"sm\">Feedback</Button>\r\n          </NavLink>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { SpeedCalculator } from \"./SpeedCalculator/Components/SpeedCalculator\";\r\nimport { BattleSimulator } from \"./BattleSimulator\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Navigation } from \"./Navigation\";\r\n\r\nexport default function App(): JSX.Element {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <>\r\n        <Navigation />\r\n        <Switch>\r\n          <Route path=\"/real-speed-calculator\">\r\n            <Container fluid>\r\n              <h1>Real speed calculator</h1>\r\n              <SpeedCalculator />\r\n            </Container>\r\n          </Route>\r\n          <Route path=\"/battle-simulator\">\r\n            <Container fluid>\r\n              <h1>Turn simulator</h1>\r\n              <BattleSimulator />\r\n            </Container>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Jumbotron fluid>\r\n              <Container>\r\n                <h1>Welcome</h1>\r\n                <p>\r\n                  This page is aim to be <em>RAID: Shadow Legends</em> speed\r\n                  calculation simulator\r\n                </p>\r\n                <p>You can calculate here real speed of a champion</p>\r\n                <p>You can simulate battle using speed related skills</p>\r\n              </Container>\r\n            </Jumbotron>\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}